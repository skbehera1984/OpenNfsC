/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _NLM_H_RPCGEN
#define _NLM_H_RPCGEN

#include <rpc/rpc.h>

#include <pthread.h>

#ifdef __cplusplus
extern "C" {
#endif

#include <nfsrpc/nfs.h>
#include <nfsrpc/sm.h>
#define NLM_MAXSTRLEN 1024
#define NLM_MAXNAMELEN 1025
#ifndef MAX_NETOBJ_SZ
#define MAX_NETOBJ_SZ 1024

typedef struct {
	u_int netobj_len;
	char *netobj_val;
} netobj;
#endif

enum nlm_stats {
	NLMSTAT_GRANTED = 0,
	NLMSTAT_DENIED = 1,
	NLMSTAT_DENIED_NOLOCKS = 2,
	NLMSTAT_BLOCKED = 3,
	NLMSTAT_DENIED_GRACE_PERIOD = 4,
	NLMSTAT_DEADLCK = 5,
};
typedef enum nlm_stats nlm_stats;

struct __attribute__((packed)) nlm_holder {
	bool_t nlm_holder_exclusive;
	int nlm_holder_svid;
	netobj nlm_holder_oh;
	u_int nlm_holder_l_offset;
	u_int nlm_holder_l_len;
};
typedef struct nlm_holder nlm_holder;

struct __attribute__((packed)) nlm_testrply {
	nlm_stats stat;
	union {
		struct nlm_holder nlm_testrply_holder;
	} nlm_testrply_u;
};
typedef struct nlm_testrply nlm_testrply;

struct __attribute__((packed)) nlm_stat {
	nlm_stats nlm_stat;
};
typedef struct nlm_stat nlm_stat;

struct __attribute__((packed)) nlm_res {
	netobj nlm_res_cookie;
	nlm_stat nlm_res_stat;
};
typedef struct nlm_res nlm_res;

struct __attribute__((packed)) nlm_testres {
	netobj nlm_testres_cookie;
	nlm_testrply nlm_testres_stat;
};
typedef struct nlm_testres nlm_testres;

struct __attribute__((packed)) nlm_lock {
	char *nlm_lock_caller_name;
	netobj nlm_lock_fh;
	netobj nlm_lock_oh;
	int nlm_lock_svid;
	u_int nlm_lock_l_offset;
	u_int nlm_lock_l_len;
};
typedef struct nlm_lock nlm_lock;

struct __attribute__((packed)) nlm_lockargs {
	netobj nlm_lockargs_cookie;
	bool_t nlm_lockargs_block;
	bool_t nlm_lockargs_exclusive;
	struct nlm_lock nlm_lockargs_alock;
	bool_t nlm_lockargs_reclaim;
	int nlm_lockargs_state;
};
typedef struct nlm_lockargs nlm_lockargs;

struct __attribute__((packed)) nlm_cancargs {
	netobj nlm_cancargs_cookie;
	bool_t nlm_cancargs_block;
	bool_t nlm_cancargs_exclusive;
	struct nlm_lock nlm_cancargs_alock;
};
typedef struct nlm_cancargs nlm_cancargs;

struct __attribute__((packed)) nlm_testargs {
	netobj nlm_testargs_cookie;
	bool_t nlm_testargs_exclusive;
	struct nlm_lock nlm_testargs_alock;
};
typedef struct nlm_testargs nlm_testargs;

struct __attribute__((packed)) nlm_unlockargs {
	netobj nlm_unlockargs_cookie;
	struct nlm_lock nlm_unlockargs_alock;
};
typedef struct nlm_unlockargs nlm_unlockargs;

enum fsh_mode {
	fsm_DN = 0,
	fsm_DR = 1,
	fsm_DW = 2,
	fsm_DRW = 3,
};
typedef enum fsh_mode fsh_mode;

enum fsh_access {
	fsa_NONE = 0,
	fsa_R = 1,
	fsa_W = 2,
	fsa_RW = 3,
};
typedef enum fsh_access fsh_access;

struct __attribute__((packed)) nlm_share {
	char *nlm_share_caller_name;
	netobj nlm_share_fh;
	netobj nlm_share_oh;
	fsh_mode nlm_share_mode;
	fsh_access nlm_share_access;
};
typedef struct nlm_share nlm_share;

struct __attribute__((packed)) nlm_shareargs {
	netobj nlm_shareargs_cookie;
	nlm_share nlm_shareargs_share;
	bool_t nlm_shareargs_reclaim;
};
typedef struct nlm_shareargs nlm_shareargs;

struct __attribute__((packed)) nlm_shareres {
	netobj nlm_shareres_cookie;
	nlm_stats nlm_shareres_stat;
	int nlm_shareres_sequence;
};
typedef struct nlm_shareres nlm_shareres;

struct __attribute__((packed)) nlm_notify {
	char *nlm_notify_name;
	int nlm_notify_state;
};
typedef struct nlm_notify nlm_notify;

enum nlm4_stats {
	NLMSTAT4_GRANTED = 0,
	NLMSTAT4_DENIED = 1,
	NLMSTAT4_DENIED_NOLOCKS = 2,
	NLMSTAT4_BLOCKED = 3,
	NLMSTAT4_DENIED_GRACE_PERIOD = 4,
	NLMSTAT4_DEADLCK = 5,
	NLMSTAT4_ROFS = 6,
	NLMSTAT4_STALE_FH = 7,
	NLMSTAT4_FBIG = 8,
	NLMSTAT4_FAILED = 9,
};
typedef enum nlm4_stats nlm4_stats;

struct __attribute__((packed)) nlm4_stat {
	nlm4_stats nlm4_stat;
};
typedef struct nlm4_stat nlm4_stat;

struct __attribute__((packed)) nlm4_holder {
	bool_t nlm4_holder_exclusive;
	u_int nlm4_holder_svid;
	netobj nlm4_holder_oh;
	u_quad_t nlm4_holder_l_offset;
	u_quad_t nlm4_holder_l_len;
};
typedef struct nlm4_holder nlm4_holder;

struct __attribute__((packed)) nlm4_lock {
	char *nlm4_lock_caller_name;
	netobj nlm4_lock_fh;
	netobj nlm4_lock_oh;
	u_int nlm4_lock_svid;
	u_quad_t nlm4_lock_l_offset;
	u_quad_t nlm4_lock_l_len;
};
typedef struct nlm4_lock nlm4_lock;

struct __attribute__((packed)) nlm4_share {
	char *nlm4_share_caller_name;
	netobj nlm4_share_fh;
	netobj nlm4_share_oh;
	fsh_mode nlm4_share_mode;
	fsh_access nlm4_share_access;
};
typedef struct nlm4_share nlm4_share;

struct __attribute__((packed)) nlm4_testrply {
	nlm4_stats stat;
	union {
		struct nlm4_holder nlm4_testrply_holder;
	} nlm4_testrply_u;
};
typedef struct nlm4_testrply nlm4_testrply;

struct __attribute__((packed)) nlm4_testres {
	netobj nlm4_testres_cookie;
	nlm4_testrply nlm4_testres_stat;
};
typedef struct nlm4_testres nlm4_testres;

struct __attribute__((packed)) nlm4_testargs {
	netobj nlm4_testargs_cookie;
	bool_t nlm4_testargs_exclusive;
	struct nlm4_lock nlm4_testargs_alock;
};
typedef struct nlm4_testargs nlm4_testargs;

struct __attribute__((packed)) nlm4_res {
	netobj nlm4_res_cookie;
	nlm4_stat nlm4_res_stat;
};
typedef struct nlm4_res nlm4_res;

struct __attribute__((packed)) nlm4_lockargs {
	netobj nlm4_lockargs_cookie;
	bool_t nlm4_lockargs_block;
	bool_t nlm4_lockargs_exclusive;
	struct nlm4_lock nlm4_lockargs_alock;
	bool_t nlm4_lockargs_reclaim;
	int nlm4_lockargs_state;
};
typedef struct nlm4_lockargs nlm4_lockargs;

struct __attribute__((packed)) nlm4_cancargs {
	netobj nlm4_cancargs_cookie;
	bool_t nlm4_cancargs_block;
	bool_t nlm4_cancargs_exclusive;
	struct nlm4_lock nlm4_cancargs_alock;
};
typedef struct nlm4_cancargs nlm4_cancargs;

struct __attribute__((packed)) nlm4_unlockargs {
	netobj nlm4_unlockargs_cookie;
	struct nlm4_lock nlm4_unlockargs_alock;
};
typedef struct nlm4_unlockargs nlm4_unlockargs;

struct __attribute__((packed)) nlm4_shareargs {
	netobj nlm4_shareargs_cookie;
	nlm4_share nlm4_shareargs_share;
	bool_t nlm4_shareargs_reclaim;
};
typedef struct nlm4_shareargs nlm4_shareargs;

struct __attribute__((packed)) nlm4_shareres {
	netobj nlm4_shareres_cookie;
	nlm4_stats nlm4_shareres_stat;
	int nlm4_shareres_sequence;
};
typedef struct nlm4_shareres nlm4_shareres;

struct __attribute__((packed)) nlm4_notify {
	char *nlm4_notify_name;
	int nlm4_notify_state;
};
typedef struct nlm4_notify nlm4_notify;

#define RPCPROG_NLM 100021
#define NLM_SM 0

#if defined(__STDC__) || defined(__cplusplus)
#define NLM_SM_NOTIFY 1
extern  enum clnt_stat nlm_sm_notify_0(struct sm_status *, void *, CLIENT *);
extern  bool_t nlm_sm_notify_0_svc(struct sm_status *, void *, struct svc_req *);
extern int rpcprog_nlm_0_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define NLM_SM_NOTIFY 1
extern  enum clnt_stat nlm_sm_notify_0();
extern  bool_t nlm_sm_notify_0_svc();
extern int rpcprog_nlm_0_freeresult ();
#endif /* K&R C */
#define NLM_V1 1

#if defined(__STDC__) || defined(__cplusplus)
#define NLM_V1_NULL 0
extern  enum clnt_stat nlm_v1_null_1(void *, void *, CLIENT *);
extern  bool_t nlm_v1_null_1_svc(void *, void *, struct svc_req *);
#define NLM_V1_TEST 1
extern  enum clnt_stat nlm_v1_test_1(struct nlm_testargs *, nlm_testres *, CLIENT *);
extern  bool_t nlm_v1_test_1_svc(struct nlm_testargs *, nlm_testres *, struct svc_req *);
#define NLM_V1_LOCK 2
extern  enum clnt_stat nlm_v1_lock_1(struct nlm_lockargs *, nlm_res *, CLIENT *);
extern  bool_t nlm_v1_lock_1_svc(struct nlm_lockargs *, nlm_res *, struct svc_req *);
#define NLM_V1_CANCEL 3
extern  enum clnt_stat nlm_v1_cancel_1(struct nlm_cancargs *, nlm_res *, CLIENT *);
extern  bool_t nlm_v1_cancel_1_svc(struct nlm_cancargs *, nlm_res *, struct svc_req *);
#define NLM_V1_UNLOCK 4
extern  enum clnt_stat nlm_v1_unlock_1(struct nlm_unlockargs *, nlm_res *, CLIENT *);
extern  bool_t nlm_v1_unlock_1_svc(struct nlm_unlockargs *, nlm_res *, struct svc_req *);
#define NLM_V1_GRANTED 5
extern  enum clnt_stat nlm_v1_granted_1(struct nlm_testargs *, nlm_res *, CLIENT *);
extern  bool_t nlm_v1_granted_1_svc(struct nlm_testargs *, nlm_res *, struct svc_req *);
#define NLM_V1_TEST_MSG 6
extern  enum clnt_stat nlm_v1_test_msg_1(struct nlm_testargs *, void *, CLIENT *);
extern  bool_t nlm_v1_test_msg_1_svc(struct nlm_testargs *, void *, struct svc_req *);
#define NLM_V1_LOCK_MSG 7
extern  enum clnt_stat nlm_v1_lock_msg_1(struct nlm_lockargs *, void *, CLIENT *);
extern  bool_t nlm_v1_lock_msg_1_svc(struct nlm_lockargs *, void *, struct svc_req *);
#define NLM_V1_CANCEL_MSG 8
extern  enum clnt_stat nlm_v1_cancel_msg_1(struct nlm_cancargs *, void *, CLIENT *);
extern  bool_t nlm_v1_cancel_msg_1_svc(struct nlm_cancargs *, void *, struct svc_req *);
#define NLM_V1_UNLOCK_MSG 9
extern  enum clnt_stat nlm_v1_unlock_msg_1(struct nlm_unlockargs *, void *, CLIENT *);
extern  bool_t nlm_v1_unlock_msg_1_svc(struct nlm_unlockargs *, void *, struct svc_req *);
#define NLM_V1_GRANTED_MSG 10
extern  enum clnt_stat nlm_v1_granted_msg_1(struct nlm_testargs *, void *, CLIENT *);
extern  bool_t nlm_v1_granted_msg_1_svc(struct nlm_testargs *, void *, struct svc_req *);
#define NLM_V1_TEST_RES 11
extern  enum clnt_stat nlm_v1_test_res_1(nlm_testres *, void *, CLIENT *);
extern  bool_t nlm_v1_test_res_1_svc(nlm_testres *, void *, struct svc_req *);
#define NLM_V1_LOCK_RES 12
extern  enum clnt_stat nlm_v1_lock_res_1(nlm_res *, void *, CLIENT *);
extern  bool_t nlm_v1_lock_res_1_svc(nlm_res *, void *, struct svc_req *);
#define NLM_V1_CANCEL_RES 13
extern  enum clnt_stat nlm_v1_cancel_res_1(nlm_res *, void *, CLIENT *);
extern  bool_t nlm_v1_cancel_res_1_svc(nlm_res *, void *, struct svc_req *);
#define NLM_V1_UNLOCK_RES 14
extern  enum clnt_stat nlm_v1_unlock_res_1(nlm_res *, void *, CLIENT *);
extern  bool_t nlm_v1_unlock_res_1_svc(nlm_res *, void *, struct svc_req *);
#define NLM_V1_GRANTED_RES 15
extern  enum clnt_stat nlm_v1_granted_res_1(nlm_res *, void *, CLIENT *);
extern  bool_t nlm_v1_granted_res_1_svc(nlm_res *, void *, struct svc_req *);
extern int rpcprog_nlm_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define NLM_V1_NULL 0
extern  enum clnt_stat nlm_v1_null_1();
extern  bool_t nlm_v1_null_1_svc();
#define NLM_V1_TEST 1
extern  enum clnt_stat nlm_v1_test_1();
extern  bool_t nlm_v1_test_1_svc();
#define NLM_V1_LOCK 2
extern  enum clnt_stat nlm_v1_lock_1();
extern  bool_t nlm_v1_lock_1_svc();
#define NLM_V1_CANCEL 3
extern  enum clnt_stat nlm_v1_cancel_1();
extern  bool_t nlm_v1_cancel_1_svc();
#define NLM_V1_UNLOCK 4
extern  enum clnt_stat nlm_v1_unlock_1();
extern  bool_t nlm_v1_unlock_1_svc();
#define NLM_V1_GRANTED 5
extern  enum clnt_stat nlm_v1_granted_1();
extern  bool_t nlm_v1_granted_1_svc();
#define NLM_V1_TEST_MSG 6
extern  enum clnt_stat nlm_v1_test_msg_1();
extern  bool_t nlm_v1_test_msg_1_svc();
#define NLM_V1_LOCK_MSG 7
extern  enum clnt_stat nlm_v1_lock_msg_1();
extern  bool_t nlm_v1_lock_msg_1_svc();
#define NLM_V1_CANCEL_MSG 8
extern  enum clnt_stat nlm_v1_cancel_msg_1();
extern  bool_t nlm_v1_cancel_msg_1_svc();
#define NLM_V1_UNLOCK_MSG 9
extern  enum clnt_stat nlm_v1_unlock_msg_1();
extern  bool_t nlm_v1_unlock_msg_1_svc();
#define NLM_V1_GRANTED_MSG 10
extern  enum clnt_stat nlm_v1_granted_msg_1();
extern  bool_t nlm_v1_granted_msg_1_svc();
#define NLM_V1_TEST_RES 11
extern  enum clnt_stat nlm_v1_test_res_1();
extern  bool_t nlm_v1_test_res_1_svc();
#define NLM_V1_LOCK_RES 12
extern  enum clnt_stat nlm_v1_lock_res_1();
extern  bool_t nlm_v1_lock_res_1_svc();
#define NLM_V1_CANCEL_RES 13
extern  enum clnt_stat nlm_v1_cancel_res_1();
extern  bool_t nlm_v1_cancel_res_1_svc();
#define NLM_V1_UNLOCK_RES 14
extern  enum clnt_stat nlm_v1_unlock_res_1();
extern  bool_t nlm_v1_unlock_res_1_svc();
#define NLM_V1_GRANTED_RES 15
extern  enum clnt_stat nlm_v1_granted_res_1();
extern  bool_t nlm_v1_granted_res_1_svc();
extern int rpcprog_nlm_1_freeresult ();
#endif /* K&R C */
#define NLM_V3 3

#if defined(__STDC__) || defined(__cplusplus)
#define NLM_V3_TEST 1
extern  enum clnt_stat nlm_v3_test_3(struct nlm_testargs *, nlm_testres *, CLIENT *);
extern  bool_t nlm_v3_test_3_svc(struct nlm_testargs *, nlm_testres *, struct svc_req *);
#define NLM_V3_LOCK 2
extern  enum clnt_stat nlm_v3_lock_3(struct nlm_lockargs *, nlm_res *, CLIENT *);
extern  bool_t nlm_v3_lock_3_svc(struct nlm_lockargs *, nlm_res *, struct svc_req *);
#define NLM_V3_CANCEL 3
extern  enum clnt_stat nlm_v3_cancel_3(struct nlm_cancargs *, nlm_res *, CLIENT *);
extern  bool_t nlm_v3_cancel_3_svc(struct nlm_cancargs *, nlm_res *, struct svc_req *);
#define NLM_V3_UNLOCK 4
extern  enum clnt_stat nlm_v3_unlock_3(struct nlm_unlockargs *, nlm_res *, CLIENT *);
extern  bool_t nlm_v3_unlock_3_svc(struct nlm_unlockargs *, nlm_res *, struct svc_req *);
#define NLM_V3_GRANTED 5
extern  enum clnt_stat nlm_v3_granted_3(struct nlm_testargs *, nlm_res *, CLIENT *);
extern  bool_t nlm_v3_granted_3_svc(struct nlm_testargs *, nlm_res *, struct svc_req *);
#define NLM_V3_TEST_MSG 6
extern  enum clnt_stat nlm_v3_test_msg_3(struct nlm_testargs *, void *, CLIENT *);
extern  bool_t nlm_v3_test_msg_3_svc(struct nlm_testargs *, void *, struct svc_req *);
#define NLM_V3_LOCK_MSG 7
extern  enum clnt_stat nlm_v3_lock_msg_3(struct nlm_lockargs *, void *, CLIENT *);
extern  bool_t nlm_v3_lock_msg_3_svc(struct nlm_lockargs *, void *, struct svc_req *);
#define NLM_V3_CANCEL_MSG 8
extern  enum clnt_stat nlm_v3_cancel_msg_3(struct nlm_cancargs *, void *, CLIENT *);
extern  bool_t nlm_v3_cancel_msg_3_svc(struct nlm_cancargs *, void *, struct svc_req *);
#define NLM_V3_UNLOCK_MSG 9
extern  enum clnt_stat nlm_v3_unlock_msg_3(struct nlm_unlockargs *, void *, CLIENT *);
extern  bool_t nlm_v3_unlock_msg_3_svc(struct nlm_unlockargs *, void *, struct svc_req *);
#define NLM_V3_GRANTED_MSG 10
extern  enum clnt_stat nlm_v3_granted_msg_3(struct nlm_testargs *, void *, CLIENT *);
extern  bool_t nlm_v3_granted_msg_3_svc(struct nlm_testargs *, void *, struct svc_req *);
#define NLM_V3_TEST_RES 11
extern  enum clnt_stat nlm_v3_test_res_3(nlm_testres *, void *, CLIENT *);
extern  bool_t nlm_v3_test_res_3_svc(nlm_testres *, void *, struct svc_req *);
#define NLM_V3_LOCK_RES 12
extern  enum clnt_stat nlm_v3_lock_res_3(nlm_res *, void *, CLIENT *);
extern  bool_t nlm_v3_lock_res_3_svc(nlm_res *, void *, struct svc_req *);
#define NLM_V3_CANCEL_RES 13
extern  enum clnt_stat nlm_v3_cancel_res_3(nlm_res *, void *, CLIENT *);
extern  bool_t nlm_v3_cancel_res_3_svc(nlm_res *, void *, struct svc_req *);
#define NLM_V3_UNLOCK_RES 14
extern  enum clnt_stat nlm_v3_unlock_res_3(nlm_res *, void *, CLIENT *);
extern  bool_t nlm_v3_unlock_res_3_svc(nlm_res *, void *, struct svc_req *);
#define NLM_V3_GRANTED_RES 15
extern  enum clnt_stat nlm_v3_granted_res_3(nlm_res *, void *, CLIENT *);
extern  bool_t nlm_v3_granted_res_3_svc(nlm_res *, void *, struct svc_req *);
#define NLM_V3_SHARE 20
extern  enum clnt_stat nlm_v3_share_3(nlm_shareargs *, nlm_shareres *, CLIENT *);
extern  bool_t nlm_v3_share_3_svc(nlm_shareargs *, nlm_shareres *, struct svc_req *);
#define NLM_V3_UNSHARE 21
extern  enum clnt_stat nlm_v3_unshare_3(nlm_shareargs *, nlm_shareres *, CLIENT *);
extern  bool_t nlm_v3_unshare_3_svc(nlm_shareargs *, nlm_shareres *, struct svc_req *);
#define NLM_V3_NM_LOCK 22
extern  enum clnt_stat nlm_v3_nm_lock_3(nlm_lockargs *, nlm_res *, CLIENT *);
extern  bool_t nlm_v3_nm_lock_3_svc(nlm_lockargs *, nlm_res *, struct svc_req *);
#define NLM_V3_FREE_ALL 23
extern  enum clnt_stat nlm_v3_free_all_3(nlm_notify *, void *, CLIENT *);
extern  bool_t nlm_v3_free_all_3_svc(nlm_notify *, void *, struct svc_req *);
extern int rpcprog_nlm_3_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define NLM_V3_TEST 1
extern  enum clnt_stat nlm_v3_test_3();
extern  bool_t nlm_v3_test_3_svc();
#define NLM_V3_LOCK 2
extern  enum clnt_stat nlm_v3_lock_3();
extern  bool_t nlm_v3_lock_3_svc();
#define NLM_V3_CANCEL 3
extern  enum clnt_stat nlm_v3_cancel_3();
extern  bool_t nlm_v3_cancel_3_svc();
#define NLM_V3_UNLOCK 4
extern  enum clnt_stat nlm_v3_unlock_3();
extern  bool_t nlm_v3_unlock_3_svc();
#define NLM_V3_GRANTED 5
extern  enum clnt_stat nlm_v3_granted_3();
extern  bool_t nlm_v3_granted_3_svc();
#define NLM_V3_TEST_MSG 6
extern  enum clnt_stat nlm_v3_test_msg_3();
extern  bool_t nlm_v3_test_msg_3_svc();
#define NLM_V3_LOCK_MSG 7
extern  enum clnt_stat nlm_v3_lock_msg_3();
extern  bool_t nlm_v3_lock_msg_3_svc();
#define NLM_V3_CANCEL_MSG 8
extern  enum clnt_stat nlm_v3_cancel_msg_3();
extern  bool_t nlm_v3_cancel_msg_3_svc();
#define NLM_V3_UNLOCK_MSG 9
extern  enum clnt_stat nlm_v3_unlock_msg_3();
extern  bool_t nlm_v3_unlock_msg_3_svc();
#define NLM_V3_GRANTED_MSG 10
extern  enum clnt_stat nlm_v3_granted_msg_3();
extern  bool_t nlm_v3_granted_msg_3_svc();
#define NLM_V3_TEST_RES 11
extern  enum clnt_stat nlm_v3_test_res_3();
extern  bool_t nlm_v3_test_res_3_svc();
#define NLM_V3_LOCK_RES 12
extern  enum clnt_stat nlm_v3_lock_res_3();
extern  bool_t nlm_v3_lock_res_3_svc();
#define NLM_V3_CANCEL_RES 13
extern  enum clnt_stat nlm_v3_cancel_res_3();
extern  bool_t nlm_v3_cancel_res_3_svc();
#define NLM_V3_UNLOCK_RES 14
extern  enum clnt_stat nlm_v3_unlock_res_3();
extern  bool_t nlm_v3_unlock_res_3_svc();
#define NLM_V3_GRANTED_RES 15
extern  enum clnt_stat nlm_v3_granted_res_3();
extern  bool_t nlm_v3_granted_res_3_svc();
#define NLM_V3_SHARE 20
extern  enum clnt_stat nlm_v3_share_3();
extern  bool_t nlm_v3_share_3_svc();
#define NLM_V3_UNSHARE 21
extern  enum clnt_stat nlm_v3_unshare_3();
extern  bool_t nlm_v3_unshare_3_svc();
#define NLM_V3_NM_LOCK 22
extern  enum clnt_stat nlm_v3_nm_lock_3();
extern  bool_t nlm_v3_nm_lock_3_svc();
#define NLM_V3_FREE_ALL 23
extern  enum clnt_stat nlm_v3_free_all_3();
extern  bool_t nlm_v3_free_all_3_svc();
extern int rpcprog_nlm_3_freeresult ();
#endif /* K&R C */
#define NLM_V4 4

#if defined(__STDC__) || defined(__cplusplus)
#define NLM_V4_NULL 0
extern  enum clnt_stat nlm_v4_null_4(void *, void *, CLIENT *);
extern  bool_t nlm_v4_null_4_svc(void *, void *, struct svc_req *);
#define NLM_V4_TEST 1
extern  enum clnt_stat nlm_v4_test_4(nlm4_testargs *, nlm4_testres *, CLIENT *);
extern  bool_t nlm_v4_test_4_svc(nlm4_testargs *, nlm4_testres *, struct svc_req *);
#define NLM_V4_LOCK 2
extern  enum clnt_stat nlm_v4_lock_4(nlm4_lockargs *, nlm4_res *, CLIENT *);
extern  bool_t nlm_v4_lock_4_svc(nlm4_lockargs *, nlm4_res *, struct svc_req *);
#define NLM_V4_CANCEL 3
extern  enum clnt_stat nlm_v4_cancel_4(nlm4_cancargs *, nlm4_res *, CLIENT *);
extern  bool_t nlm_v4_cancel_4_svc(nlm4_cancargs *, nlm4_res *, struct svc_req *);
#define NLM_V4_UNLOCK 4
extern  enum clnt_stat nlm_v4_unlock_4(nlm4_unlockargs *, nlm4_res *, CLIENT *);
extern  bool_t nlm_v4_unlock_4_svc(nlm4_unlockargs *, nlm4_res *, struct svc_req *);
#define NLM_V4_GRANTED 5
extern  enum clnt_stat nlm_v4_granted_4(nlm4_testargs *, nlm4_res *, CLIENT *);
extern  bool_t nlm_v4_granted_4_svc(nlm4_testargs *, nlm4_res *, struct svc_req *);
#define NLM_V4_TEST_MSG 6
extern  enum clnt_stat nlm_v4_test_msg_4(nlm4_testargs *, void *, CLIENT *);
extern  bool_t nlm_v4_test_msg_4_svc(nlm4_testargs *, void *, struct svc_req *);
#define NLM_V4_LOCK_MSG 7
extern  enum clnt_stat nlm_v4_lock_msg_4(nlm4_lockargs *, void *, CLIENT *);
extern  bool_t nlm_v4_lock_msg_4_svc(nlm4_lockargs *, void *, struct svc_req *);
#define NLM_V4_CANCEL_MSG 8
extern  enum clnt_stat nlm_v4_cancel_msg_4(nlm4_cancargs *, void *, CLIENT *);
extern  bool_t nlm_v4_cancel_msg_4_svc(nlm4_cancargs *, void *, struct svc_req *);
#define NLM_V4_UNLOCK_MSG 9
extern  enum clnt_stat nlm_v4_unlock_msg_4(nlm4_unlockargs *, void *, CLIENT *);
extern  bool_t nlm_v4_unlock_msg_4_svc(nlm4_unlockargs *, void *, struct svc_req *);
#define NLM_V4_GRANTED_MSG 10
extern  enum clnt_stat nlm_v4_granted_msg_4(nlm4_testargs *, void *, CLIENT *);
extern  bool_t nlm_v4_granted_msg_4_svc(nlm4_testargs *, void *, struct svc_req *);
#define NLM_V4_TEST_RES 11
extern  enum clnt_stat nlm_v4_test_res_4(nlm4_testres *, void *, CLIENT *);
extern  bool_t nlm_v4_test_res_4_svc(nlm4_testres *, void *, struct svc_req *);
#define NLM_V4_LOCK_RES 12
extern  enum clnt_stat nlm_v4_lock_res_4(nlm4_res *, void *, CLIENT *);
extern  bool_t nlm_v4_lock_res_4_svc(nlm4_res *, void *, struct svc_req *);
#define NLM_V4_CANCEL_RES 13
extern  enum clnt_stat nlm_v4_cancel_res_4(nlm4_res *, void *, CLIENT *);
extern  bool_t nlm_v4_cancel_res_4_svc(nlm4_res *, void *, struct svc_req *);
#define NLM_V4_UNLOCK_RES 14
extern  enum clnt_stat nlm_v4_unlock_res_4(nlm4_res *, void *, CLIENT *);
extern  bool_t nlm_v4_unlock_res_4_svc(nlm4_res *, void *, struct svc_req *);
#define NLM_V4_GRANTED_RES 15
extern  enum clnt_stat nlm_v4_granted_res_4(nlm4_res *, void *, CLIENT *);
extern  bool_t nlm_v4_granted_res_4_svc(nlm4_res *, void *, struct svc_req *);
#define NLM_V4_SHARE 20
extern  enum clnt_stat nlm_v4_share_4(nlm4_shareargs *, nlm4_shareres *, CLIENT *);
extern  bool_t nlm_v4_share_4_svc(nlm4_shareargs *, nlm4_shareres *, struct svc_req *);
#define NLM_V4_UNSHARE 21
extern  enum clnt_stat nlm_v4_unshare_4(nlm4_shareargs *, nlm4_shareres *, CLIENT *);
extern  bool_t nlm_v4_unshare_4_svc(nlm4_shareargs *, nlm4_shareres *, struct svc_req *);
#define NLM_V4_NM_LOCK 22
extern  enum clnt_stat nlm_v4_nm_lock_4(nlm4_lockargs *, nlm4_res *, CLIENT *);
extern  bool_t nlm_v4_nm_lock_4_svc(nlm4_lockargs *, nlm4_res *, struct svc_req *);
#define NLM_V4_FREE_ALL 23
extern  enum clnt_stat nlm_v4_free_all_4(nlm4_notify *, void *, CLIENT *);
extern  bool_t nlm_v4_free_all_4_svc(nlm4_notify *, void *, struct svc_req *);
extern int rpcprog_nlm_4_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define NLM_V4_NULL 0
extern  enum clnt_stat nlm_v4_null_4();
extern  bool_t nlm_v4_null_4_svc();
#define NLM_V4_TEST 1
extern  enum clnt_stat nlm_v4_test_4();
extern  bool_t nlm_v4_test_4_svc();
#define NLM_V4_LOCK 2
extern  enum clnt_stat nlm_v4_lock_4();
extern  bool_t nlm_v4_lock_4_svc();
#define NLM_V4_CANCEL 3
extern  enum clnt_stat nlm_v4_cancel_4();
extern  bool_t nlm_v4_cancel_4_svc();
#define NLM_V4_UNLOCK 4
extern  enum clnt_stat nlm_v4_unlock_4();
extern  bool_t nlm_v4_unlock_4_svc();
#define NLM_V4_GRANTED 5
extern  enum clnt_stat nlm_v4_granted_4();
extern  bool_t nlm_v4_granted_4_svc();
#define NLM_V4_TEST_MSG 6
extern  enum clnt_stat nlm_v4_test_msg_4();
extern  bool_t nlm_v4_test_msg_4_svc();
#define NLM_V4_LOCK_MSG 7
extern  enum clnt_stat nlm_v4_lock_msg_4();
extern  bool_t nlm_v4_lock_msg_4_svc();
#define NLM_V4_CANCEL_MSG 8
extern  enum clnt_stat nlm_v4_cancel_msg_4();
extern  bool_t nlm_v4_cancel_msg_4_svc();
#define NLM_V4_UNLOCK_MSG 9
extern  enum clnt_stat nlm_v4_unlock_msg_4();
extern  bool_t nlm_v4_unlock_msg_4_svc();
#define NLM_V4_GRANTED_MSG 10
extern  enum clnt_stat nlm_v4_granted_msg_4();
extern  bool_t nlm_v4_granted_msg_4_svc();
#define NLM_V4_TEST_RES 11
extern  enum clnt_stat nlm_v4_test_res_4();
extern  bool_t nlm_v4_test_res_4_svc();
#define NLM_V4_LOCK_RES 12
extern  enum clnt_stat nlm_v4_lock_res_4();
extern  bool_t nlm_v4_lock_res_4_svc();
#define NLM_V4_CANCEL_RES 13
extern  enum clnt_stat nlm_v4_cancel_res_4();
extern  bool_t nlm_v4_cancel_res_4_svc();
#define NLM_V4_UNLOCK_RES 14
extern  enum clnt_stat nlm_v4_unlock_res_4();
extern  bool_t nlm_v4_unlock_res_4_svc();
#define NLM_V4_GRANTED_RES 15
extern  enum clnt_stat nlm_v4_granted_res_4();
extern  bool_t nlm_v4_granted_res_4_svc();
#define NLM_V4_SHARE 20
extern  enum clnt_stat nlm_v4_share_4();
extern  bool_t nlm_v4_share_4_svc();
#define NLM_V4_UNSHARE 21
extern  enum clnt_stat nlm_v4_unshare_4();
extern  bool_t nlm_v4_unshare_4_svc();
#define NLM_V4_NM_LOCK 22
extern  enum clnt_stat nlm_v4_nm_lock_4();
extern  bool_t nlm_v4_nm_lock_4_svc();
#define NLM_V4_FREE_ALL 23
extern  enum clnt_stat nlm_v4_free_all_4();
extern  bool_t nlm_v4_free_all_4_svc();
extern int rpcprog_nlm_4_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_netobj (XDR *, netobj*);
extern  bool_t xdr_nlm_stats (XDR *, nlm_stats*);
extern  bool_t xdr_nlm_holder (XDR *, nlm_holder*);
extern  bool_t xdr_nlm_testrply (XDR *, nlm_testrply*);
extern  bool_t xdr_nlm_stat (XDR *, nlm_stat*);
extern  bool_t xdr_nlm_res (XDR *, nlm_res*);
extern  bool_t xdr_nlm_testres (XDR *, nlm_testres*);
extern  bool_t xdr_nlm_lock (XDR *, nlm_lock*);
extern  bool_t xdr_nlm_lockargs (XDR *, nlm_lockargs*);
extern  bool_t xdr_nlm_cancargs (XDR *, nlm_cancargs*);
extern  bool_t xdr_nlm_testargs (XDR *, nlm_testargs*);
extern  bool_t xdr_nlm_unlockargs (XDR *, nlm_unlockargs*);
extern  bool_t xdr_fsh_mode (XDR *, fsh_mode*);
extern  bool_t xdr_fsh_access (XDR *, fsh_access*);
extern  bool_t xdr_nlm_share (XDR *, nlm_share*);
extern  bool_t xdr_nlm_shareargs (XDR *, nlm_shareargs*);
extern  bool_t xdr_nlm_shareres (XDR *, nlm_shareres*);
extern  bool_t xdr_nlm_notify (XDR *, nlm_notify*);
extern  bool_t xdr_nlm4_stats (XDR *, nlm4_stats*);
extern  bool_t xdr_nlm4_stat (XDR *, nlm4_stat*);
extern  bool_t xdr_nlm4_holder (XDR *, nlm4_holder*);
extern  bool_t xdr_nlm4_lock (XDR *, nlm4_lock*);
extern  bool_t xdr_nlm4_share (XDR *, nlm4_share*);
extern  bool_t xdr_nlm4_testrply (XDR *, nlm4_testrply*);
extern  bool_t xdr_nlm4_testres (XDR *, nlm4_testres*);
extern  bool_t xdr_nlm4_testargs (XDR *, nlm4_testargs*);
extern  bool_t xdr_nlm4_res (XDR *, nlm4_res*);
extern  bool_t xdr_nlm4_lockargs (XDR *, nlm4_lockargs*);
extern  bool_t xdr_nlm4_cancargs (XDR *, nlm4_cancargs*);
extern  bool_t xdr_nlm4_unlockargs (XDR *, nlm4_unlockargs*);
extern  bool_t xdr_nlm4_shareargs (XDR *, nlm4_shareargs*);
extern  bool_t xdr_nlm4_shareres (XDR *, nlm4_shareres*);
extern  bool_t xdr_nlm4_notify (XDR *, nlm4_notify*);

#else /* K&R C */
extern bool_t xdr_netobj ();
extern bool_t xdr_nlm_stats ();
extern bool_t xdr_nlm_holder ();
extern bool_t xdr_nlm_testrply ();
extern bool_t xdr_nlm_stat ();
extern bool_t xdr_nlm_res ();
extern bool_t xdr_nlm_testres ();
extern bool_t xdr_nlm_lock ();
extern bool_t xdr_nlm_lockargs ();
extern bool_t xdr_nlm_cancargs ();
extern bool_t xdr_nlm_testargs ();
extern bool_t xdr_nlm_unlockargs ();
extern bool_t xdr_fsh_mode ();
extern bool_t xdr_fsh_access ();
extern bool_t xdr_nlm_share ();
extern bool_t xdr_nlm_shareargs ();
extern bool_t xdr_nlm_shareres ();
extern bool_t xdr_nlm_notify ();
extern bool_t xdr_nlm4_stats ();
extern bool_t xdr_nlm4_stat ();
extern bool_t xdr_nlm4_holder ();
extern bool_t xdr_nlm4_lock ();
extern bool_t xdr_nlm4_share ();
extern bool_t xdr_nlm4_testrply ();
extern bool_t xdr_nlm4_testres ();
extern bool_t xdr_nlm4_testargs ();
extern bool_t xdr_nlm4_res ();
extern bool_t xdr_nlm4_lockargs ();
extern bool_t xdr_nlm4_cancargs ();
extern bool_t xdr_nlm4_unlockargs ();
extern bool_t xdr_nlm4_shareargs ();
extern bool_t xdr_nlm4_shareres ();
extern bool_t xdr_nlm4_notify ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_NLM_H_RPCGEN */
