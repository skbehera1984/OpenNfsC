/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _NFS_H_RPCGEN
#define _NFS_H_RPCGEN

#include <rpc/rpc.h>

#include <pthread.h>

#ifdef __cplusplus
extern "C" {
#endif

#define NFS_PORT 2049
#define NFS_MAXDATA 32768
#define NFS_MAXPATHLEN 1024
#define NFS_MAXNAMLEN 255
#define NFS2_FHSIZE 32
#define NFS2_COOKIESIZE 4
#define NFS2_FIFO_DEV -1
#define NFSMODE_FMT 0170000
#define NFSMODE_DIR 0040000
#define NFSMODE_CHR 0020000
#define NFSMODE_BLK 0060000
#define NFSMODE_REG 0100000
#define NFSMODE_LNK 0120000
#define NFSMODE_SOCK 0140000
#define NFSMODE_FIFO 0010000

enum nfsstat2 {
	NFS2_OK = 0,
	NFS2ERR_PERM = 1,
	NFS2ERR_NOENT = 2,
	NFS2ERR_IO = 5,
	NFS2ERR_NXIO = 6,
	NFS2ERR_ACCES = 13,
	NFS2ERR_EXIST = 17,
	NFSXERR_XDEV = 18,
	NFS2ERR_NODEV = 19,
	NFS2ERR_NOTDIR = 20,
	NFS2ERR_ISDIR = 21,
	NFSXERR_INVAL = 22,
	NFS2ERR_FBIG = 27,
	NFS2ERR_NOSPC = 28,
	NFS2ERR_ROFS = 30,
	NFSXERR_OPNOTSUPP = 45,
	NFS2ERR_NAMETOOLONG = 63,
	NFS2ERR_NOTEMPTY = 66,
	NFS2ERR_DQUOT = 69,
	NFS2ERR_STALE = 70,
	NFSXERR_REMOTE = 71,
	NFSXERR_WFLUSH = 72,
	NFS2ERR_WFLUSH = 99,
};
typedef enum nfsstat2 nfsstat2;

enum ftype2 {
	NF2NON = 0,
	NF2REG = 1,
	NF2DIR = 2,
	NF2BLK = 3,
	NF2CHR = 4,
	NF2LNK = 5,
	NF2SOCK = 6,
	NF2BAD = 7,
	NF2FIFO = 8,
};
typedef enum ftype2 ftype2;

struct __attribute__((packed)) nfs_fh2 {
	char fh_data[NFS2_FHSIZE];
};
typedef struct nfs_fh2 nfs_fh2;

struct __attribute__((packed)) nfstime2 {
	u_int time_seconds;
	u_int time_useconds;
};
typedef struct nfstime2 nfstime2;

struct __attribute__((packed)) fattr2 {
	ftype2 fattr2_type;
	u_int fattr2_mode;
	u_int fattr2_nlink;
	u_int fattr2_uid;
	u_int fattr2_gid;
	u_int fattr2_size;
	u_int fattr2_blocksize;
	u_int fattr2_rdev;
	u_int fattr2_blocks;
	u_int fattr2_fsid;
	u_int fattr2_fileid;
	nfstime2 fattr2_atime;
	nfstime2 fattr2_mtime;
	nfstime2 fattr2_ctime;
};
typedef struct fattr2 fattr2;

struct __attribute__((packed)) sattr2 {
	u_int sattr2_mode;
	u_int sattr2_uid;
	u_int sattr2_gid;
	u_int sattr2_size;
	nfstime2 sattr2_atime;
	nfstime2 sattr2_mtime;
};
typedef struct sattr2 sattr2;

typedef char *filename2;

typedef char *nfspath2;

struct __attribute__((packed)) attrstat2 {
	nfsstat2 status;
	union {
		fattr2 attrstat2;
	} attrstat2_u;
};
typedef struct attrstat2 attrstat2;

struct __attribute__((packed)) sattr2args {
	nfs_fh2 sattr2_file;
	sattr2 sattr2_attributes;
};
typedef struct sattr2args sattr2args;

struct __attribute__((packed)) dirop2args {
	nfs_fh2 dirop2_dir;
	filename2 dirop2_name;
};
typedef struct dirop2args dirop2args;

struct __attribute__((packed)) dirop2okres {
	nfs_fh2 dirop2_file;
	fattr2 dirop2_attributes;
};
typedef struct dirop2okres dirop2okres;

struct __attribute__((packed)) dirop2res {
	nfsstat2 status;
	union {
		dirop2okres dirop2res;
	} dirop2res_u;
};
typedef struct dirop2res dirop2res;

struct __attribute__((packed)) readlink2res {
	nfsstat2 status;
	union {
		nfspath2 readlink2_data;
	} readlink2res_u;
};
typedef struct readlink2res readlink2res;

struct __attribute__((packed)) read2args {
	nfs_fh2 read2_file;
	u_int read2_offset;
	u_int read2_count;
	u_int read2_totalcount;
};
typedef struct read2args read2args;

struct __attribute__((packed)) read2okres {
	fattr2 read2_attributes;
	struct __attribute__((packed)) {
		u_int read2_data_len;
		char *read2_data_val;
	} read2_data;
};
typedef struct read2okres read2okres;

struct __attribute__((packed)) read2res {
	nfsstat2 status;
	union {
		read2okres read2_reply;
	} read2res_u;
};
typedef struct read2res read2res;

struct __attribute__((packed)) write2args {
	nfs_fh2 write2_file;
	u_int write2_beginoffset;
	u_int write2_offset;
	u_int write2_totalcount;
	struct __attribute__((packed)) {
		u_int write2_data_len;
		char *write2_data_val;
	} write2_data;
};
typedef struct write2args write2args;

struct __attribute__((packed)) create2args {
	dirop2args create2_where;
	sattr2 create2_attributes;
};
typedef struct create2args create2args;

struct __attribute__((packed)) rename2args {
	dirop2args rename2_from;
	dirop2args rename2_to;
};
typedef struct rename2args rename2args;

struct __attribute__((packed)) link2args {
	nfs_fh2 link2_from;
	dirop2args link2_to;
};
typedef struct link2args link2args;

struct __attribute__((packed)) symlink2args {
	dirop2args symlink2_from;
	nfspath2 symlink2_to;
	sattr2 symlink2_attributes;
};
typedef struct symlink2args symlink2args;

typedef char nfscookie2[NFS2_COOKIESIZE];

struct __attribute__((packed)) readdir2args {
	nfs_fh2 readdir2_dir;
	nfscookie2 readdir2_cookie;
	u_int readdir2_count;
};
typedef struct readdir2args readdir2args;

struct __attribute__((packed)) entry2 {
	u_int entry2_fileid;
	filename2 entry2_name;
	nfscookie2 entry2_cookie;
	struct entry2 *entry2_nextentry;
};
typedef struct entry2 entry2;

struct __attribute__((packed)) dirlist2 {
	entry2 *dirlist2_entries;
	bool_t dirlist2_eof;
};
typedef struct dirlist2 dirlist2;

struct __attribute__((packed)) readdir2res {
	nfsstat2 status;
	union {
		dirlist2 readdir2_reply;
	} readdir2res_u;
};
typedef struct readdir2res readdir2res;

struct __attribute__((packed)) statfs2okres {
	u_int statfs2_tsize;
	u_int statfs2_bsize;
	u_int statfs2_blocks;
	u_int statfs2_bfree;
	u_int statfs2_bavail;
};
typedef struct statfs2okres statfs2okres;

struct __attribute__((packed)) statfs2res {
	nfsstat2 status;
	union {
		statfs2okres statfs2_reply;
	} statfs2res_u;
};
typedef struct statfs2res statfs2res;
#define NFS3_FHSIZE 64
#define NFS3_COOKIEVERFSIZE 8
#define NFS3_CREATEVERFSIZE 8
#define NFS3_WRITEVERFSIZE 8

typedef char *filename3;

typedef char *nfspath3;

typedef u_quad_t fileid3;

typedef u_quad_t cookie3;

typedef char cookieverf3[NFS3_COOKIEVERFSIZE];

typedef char createverf3[NFS3_CREATEVERFSIZE];

typedef char writeverf3[NFS3_WRITEVERFSIZE];

typedef u_int uid3;

typedef u_int gid3;

typedef u_quad_t size3;

typedef u_quad_t offset3;

typedef u_int mode3;

typedef u_int count3;

enum nfsstat3 {
	NFS3_OK = 0,
	NFS3ERR_PERM = 1,
	NFS3ERR_NOENT = 2,
	NFS3ERR_IO = 5,
	NFS3ERR_NXIO = 6,
	NFS3ERR_ACCES = 13,
	NFS3ERR_EXIST = 17,
	NFS3ERR_XDEV = 18,
	NFS3ERR_NODEV = 19,
	NFS3ERR_NOTDIR = 20,
	NFS3ERR_ISDIR = 21,
	NFS3ERR_INVAL = 22,
	NFS3ERR_FBIG = 27,
	NFS3ERR_NOSPC = 28,
	NFS3ERR_ROFS = 30,
	NFS3ERR_MLINK = 31,
	NFS3ERR_NAMETOOLONG = 63,
	NFS3ERR_NOTEMPTY = 66,
	NFS3ERR_DQUOT = 69,
	NFS3ERR_STALE = 70,
	NFS3ERR_REMOTE = 71,
	NFS3ERR_BADHANDLE = 10001,
	NFS3ERR_NOT_SYNC = 10002,
	NFS3ERR_BAD_COOKIE = 10003,
	NFS3ERR_NOTSUPP = 10004,
	NFS3ERR_TOOSMALL = 10005,
	NFS3ERR_SERVERFAULT = 10006,
	NFS3ERR_BADTYPE = 10007,
	NFS3ERR_JUKEBOX = 10008,
};
typedef enum nfsstat3 nfsstat3;

enum ftype3 {
	NF3NON = 0,
	NF3REG = 1,
	NF3DIR = 2,
	NF3BLK = 3,
	NF3CHR = 4,
	NF3LNK = 5,
	NF3SOCK = 6,
	NF3FIFO = 7,
};
typedef enum ftype3 ftype3;

struct __attribute__((packed)) specdata3 {
	u_int specdata1;
	u_int specdata2;
};
typedef struct specdata3 specdata3;

struct __attribute__((packed)) nfs_fh3 {
	struct __attribute__((packed)) {
		u_int fh3_data_len;
		char *fh3_data_val;
	} fh3_data;
};
typedef struct nfs_fh3 nfs_fh3;

struct __attribute__((packed)) nfstime3 {
	u_int time3_seconds;
	u_int time3_nseconds;
};
typedef struct nfstime3 nfstime3;

struct __attribute__((packed)) fattr3 {
	ftype3 fattr3_type;
	mode3 fattr3_mode;
	u_int fattr3_nlink;
	uid3 fattr3_uid;
	gid3 fattr3_gid;
	size3 fattr3_size;
	size3 fattr3_used;
	specdata3 fattr3_rdev;
	u_quad_t fattr3_fsid;
	fileid3 fattr3_fileid;
	nfstime3 fattr3_atime;
	nfstime3 fattr3_mtime;
	nfstime3 fattr3_ctime;
};
typedef struct fattr3 fattr3;

struct __attribute__((packed)) post_op_attr {
	bool_t attributes_follow;
	union {
		fattr3 post_op_attr;
	} post_op_attr_u;
};
typedef struct post_op_attr post_op_attr;

struct __attribute__((packed)) wcc_attr {
	size3 wcc_size;
	nfstime3 wcc_mtime;
	nfstime3 wcc_ctime;
};
typedef struct wcc_attr wcc_attr;

struct __attribute__((packed)) pre_op_attr {
	bool_t attributes_follow;
	union {
		wcc_attr pre_op_attr;
	} pre_op_attr_u;
};
typedef struct pre_op_attr pre_op_attr;

struct __attribute__((packed)) wcc_data {
	pre_op_attr wcc_before;
	post_op_attr wcc_after;
};
typedef struct wcc_data wcc_data;

struct __attribute__((packed)) post_op_fh3 {
	bool_t handle_follows;
	union {
		nfs_fh3 post_op_fh3;
	} post_op_fh3_u;
};
typedef struct post_op_fh3 post_op_fh3;

enum time_how {
	TIME_DONT_CHANGE = 0,
	TIME_SET_TO_SERVER_TIME = 1,
	TIME_SET_TO_CLIENT_TIME = 2,
};
typedef enum time_how time_how;

struct __attribute__((packed)) set_mode3 {
	bool_t set_it;
	union {
		mode3 mode;
	} set_mode3_u;
};
typedef struct set_mode3 set_mode3;

struct __attribute__((packed)) set_uid3 {
	bool_t set_it;
	union {
		uid3 uid;
	} set_uid3_u;
};
typedef struct set_uid3 set_uid3;

struct __attribute__((packed)) set_gid3 {
	bool_t set_it;
	union {
		gid3 gid;
	} set_gid3_u;
};
typedef struct set_gid3 set_gid3;

struct __attribute__((packed)) set_size3 {
	bool_t set_it;
	union {
		size3 size;
	} set_size3_u;
};
typedef struct set_size3 set_size3;

struct __attribute__((packed)) set_atime {
	time_how set_it;
	union {
		nfstime3 atime;
	} set_atime_u;
};
typedef struct set_atime set_atime;

struct __attribute__((packed)) set_mtime {
	time_how set_it;
	union {
		nfstime3 mtime;
	} set_mtime_u;
};
typedef struct set_mtime set_mtime;

struct __attribute__((packed)) sattr3 {
	set_mode3 sattr3_mode;
	set_uid3 sattr3_uid;
	set_gid3 sattr3_gid;
	set_size3 sattr3_size;
	set_atime sattr3_atime;
	set_mtime sattr3_mtime;
};
typedef struct sattr3 sattr3;

struct __attribute__((packed)) diropargs3 {
	nfs_fh3 dirop3_dir;
	filename3 dirop3_name;
};
typedef struct diropargs3 diropargs3;

struct __attribute__((packed)) GETATTR3args {
	nfs_fh3 getattr3_object;
};
typedef struct GETATTR3args GETATTR3args;

struct __attribute__((packed)) GETATTR3resok {
	fattr3 getattr3_obj_attributes;
};
typedef struct GETATTR3resok GETATTR3resok;

struct __attribute__((packed)) GETATTR3res {
	nfsstat3 status;
	union {
		GETATTR3resok getattr3ok;
	} GETATTR3res_u;
};
typedef struct GETATTR3res GETATTR3res;

struct __attribute__((packed)) sattrguard3 {
	bool_t check;
	union {
		nfstime3 sattr3_obj_ctime;
	} sattrguard3_u;
};
typedef struct sattrguard3 sattrguard3;

struct __attribute__((packed)) SETATTR3args {
	nfs_fh3 setattr3_object;
	sattr3 setattr3_new_attributes;
	sattrguard3 setattr3_guard;
};
typedef struct SETATTR3args SETATTR3args;

struct __attribute__((packed)) SETATTR3resok {
	wcc_data setattr3_obj_wcc;
};
typedef struct SETATTR3resok SETATTR3resok;

struct __attribute__((packed)) SETATTR3resfail {
	wcc_data setattr3fail_obj_wcc;
};
typedef struct SETATTR3resfail SETATTR3resfail;

struct __attribute__((packed)) SETATTR3res {
	nfsstat3 status;
	union {
		SETATTR3resok setattr3_ok;
		SETATTR3resfail setattr3fail;
	} SETATTR3res_u;
};
typedef struct SETATTR3res SETATTR3res;

struct __attribute__((packed)) LOOKUP3args {
	diropargs3 lookup3_what;
};
typedef struct LOOKUP3args LOOKUP3args;

struct __attribute__((packed)) LOOKUP3resok {
	nfs_fh3 lookup3_object;
	post_op_attr lookup3_obj_attributes;
	post_op_attr lookup3_dir_attributes;
};
typedef struct LOOKUP3resok LOOKUP3resok;

struct __attribute__((packed)) LOOKUP3resfail {
	post_op_attr lookup3fail_dir_attributes;
};
typedef struct LOOKUP3resfail LOOKUP3resfail;

struct __attribute__((packed)) LOOKUP3res {
	nfsstat3 status;
	union {
		LOOKUP3resok lookup3ok;
		LOOKUP3resfail lookup3fail;
	} LOOKUP3res_u;
};
typedef struct LOOKUP3res LOOKUP3res;
#define ACCESS3_READ 0x0001
#define ACCESS3_LOOKUP 0x0002
#define ACCESS3_MODIFY 0x0004
#define ACCESS3_EXTEND 0x0008
#define ACCESS3_DELETE 0x0010
#define ACCESS3_EXECUTE 0x0020

struct __attribute__((packed)) ACCESS3args {
	nfs_fh3 access3_object;
	u_int access3_access;
};
typedef struct ACCESS3args ACCESS3args;

struct __attribute__((packed)) ACCESS3resok {
	post_op_attr access3_obj_attributes;
	u_int access3_res;
};
typedef struct ACCESS3resok ACCESS3resok;

struct __attribute__((packed)) ACCESS3resfail {
	post_op_attr access3fail_obj_attributes;
};
typedef struct ACCESS3resfail ACCESS3resfail;

struct __attribute__((packed)) ACCESS3res {
	nfsstat3 status;
	union {
		ACCESS3resok access3ok;
		ACCESS3resfail access3fail;
	} ACCESS3res_u;
};
typedef struct ACCESS3res ACCESS3res;

struct __attribute__((packed)) READLINK3args {
	nfs_fh3 readlink3_symlink;
};
typedef struct READLINK3args READLINK3args;

struct __attribute__((packed)) READLINK3resok {
	post_op_attr readlink3_symlink_attributes;
	nfspath3 readlink3_data;
};
typedef struct READLINK3resok READLINK3resok;

struct __attribute__((packed)) READLINK3resfail {
	post_op_attr readlink3fail_symlink_attributes;
};
typedef struct READLINK3resfail READLINK3resfail;

struct __attribute__((packed)) READLINK3res {
	nfsstat3 status;
	union {
		READLINK3resok readlink3ok;
		READLINK3resfail readlink3fail;
	} READLINK3res_u;
};
typedef struct READLINK3res READLINK3res;

struct __attribute__((packed)) READ3args {
	nfs_fh3 read3_file;
	offset3 read3_offset;
	count3 read3_count;
};
typedef struct READ3args READ3args;

struct __attribute__((packed)) READ3resok {
	post_op_attr read3_file_attributes;
	count3 read3_count_res;
	bool_t read3_eof;
	struct __attribute__((packed)) {
		u_int read3_data_len;
		char *read3_data_val;
	} read3_data;
};
typedef struct READ3resok READ3resok;

struct __attribute__((packed)) READ3resfail {
	post_op_attr read3fail_file_attributes;
};
typedef struct READ3resfail READ3resfail;

struct __attribute__((packed)) READ3res {
	nfsstat3 status;
	union {
		READ3resok read3ok;
		READ3resfail read3fail;
	} READ3res_u;
};
typedef struct READ3res READ3res;

enum stable_how {
	STABLE_UNSTABLE = 0,
	STABLE_DATA_SYNC = 1,
	STABLE_FILE_SYNC = 2,
};
typedef enum stable_how stable_how;

struct __attribute__((packed)) WRITE3args {
	nfs_fh3 write3_file;
	offset3 write3_offset;
	count3 write3_count;
	stable_how write3_stable;
	struct __attribute__((packed)) {
		u_int write3_data_len;
		char *write3_data_val;
	} write3_data;
};
typedef struct WRITE3args WRITE3args;

struct __attribute__((packed)) WRITE3resok {
	wcc_data write3_file_wcc;
	count3 write3_count_res;
	stable_how write3_committed;
	writeverf3 write3_verf;
};
typedef struct WRITE3resok WRITE3resok;

struct __attribute__((packed)) WRITE3resfail {
	wcc_data write3fail_file_wcc;
};
typedef struct WRITE3resfail WRITE3resfail;

struct __attribute__((packed)) WRITE3res {
	nfsstat3 status;
	union {
		WRITE3resok write3ok;
		WRITE3resfail write3fail;
	} WRITE3res_u;
};
typedef struct WRITE3res WRITE3res;

enum createmode3 {
	CREATE_UNCHECKED = 0,
	CREATE_GUARDED = 1,
	CREATE_EXCLUSIVE = 2,
};
typedef enum createmode3 createmode3;

struct __attribute__((packed)) createhow3 {
	createmode3 mode;
	union {
		sattr3 create3_obj_attributes;
		createverf3 create3_verf;
	} createhow3_u;
};
typedef struct createhow3 createhow3;

struct __attribute__((packed)) CREATE3args {
	diropargs3 create3_where;
	createhow3 create3_how;
};
typedef struct CREATE3args CREATE3args;

struct __attribute__((packed)) CREATE3resok {
	post_op_fh3 create3_obj;
	post_op_attr create3_obj_attributes;
	wcc_data create3_dir_wcc;
};
typedef struct CREATE3resok CREATE3resok;

struct __attribute__((packed)) CREATE3resfail {
	wcc_data create3fail_dir_wcc;
};
typedef struct CREATE3resfail CREATE3resfail;

struct __attribute__((packed)) CREATE3res {
	nfsstat3 status;
	union {
		CREATE3resok create3_ok;
		CREATE3resfail create3fail;
	} CREATE3res_u;
};
typedef struct CREATE3res CREATE3res;

struct __attribute__((packed)) MKDIR3args {
	diropargs3 mkdir3_where;
	sattr3 mkdir3_attributes;
};
typedef struct MKDIR3args MKDIR3args;

struct __attribute__((packed)) MKDIR3resok {
	post_op_fh3 mkdir3_obj;
	post_op_attr mkdir3_obj_attributes;
	wcc_data mkdir3_dir_wcc;
};
typedef struct MKDIR3resok MKDIR3resok;

struct __attribute__((packed)) MKDIR3resfail {
	wcc_data mkdir3fail_dir_wcc;
};
typedef struct MKDIR3resfail MKDIR3resfail;

struct __attribute__((packed)) MKDIR3res {
	nfsstat3 status;
	union {
		MKDIR3resok mkdir3ok;
		MKDIR3resfail mkdir3fail;
	} MKDIR3res_u;
};
typedef struct MKDIR3res MKDIR3res;

struct __attribute__((packed)) symlinkdata3 {
	sattr3 symlink3_attributes;
	nfspath3 symlink3_data;
};
typedef struct symlinkdata3 symlinkdata3;

struct __attribute__((packed)) SYMLINK3args {
	diropargs3 symlink3_where;
	symlinkdata3 symlink3_symlink;
};
typedef struct SYMLINK3args SYMLINK3args;

struct __attribute__((packed)) SYMLINK3resok {
	post_op_fh3 symlink3_obj;
	post_op_attr symlink3_obj_attributes;
	wcc_data symlink3_dir_wcc;
};
typedef struct SYMLINK3resok SYMLINK3resok;

struct __attribute__((packed)) SYMLINK3resfail {
	wcc_data symlink3fail_dir_wcc;
};
typedef struct SYMLINK3resfail SYMLINK3resfail;

struct __attribute__((packed)) SYMLINK3res {
	nfsstat3 status;
	union {
		SYMLINK3resok symlink3ok;
		SYMLINK3resfail symlink3fail;
	} SYMLINK3res_u;
};
typedef struct SYMLINK3res SYMLINK3res;

struct __attribute__((packed)) devicedata3 {
	sattr3 dev3_attributes;
	specdata3 dev3_spec;
};
typedef struct devicedata3 devicedata3;

struct __attribute__((packed)) mknoddata3 {
	ftype3 type;
	union {
		devicedata3 mknod3_device;
		sattr3 mknod3_pipe_attributes;
	} mknoddata3_u;
};
typedef struct mknoddata3 mknoddata3;

struct __attribute__((packed)) MKNOD3args {
	diropargs3 mknod3_where;
	mknoddata3 mknod3_what;
};
typedef struct MKNOD3args MKNOD3args;

struct __attribute__((packed)) MKNOD3resok {
	post_op_fh3 mknod3_obj;
	post_op_attr mknod3_obj_attributes;
	wcc_data mknod3_dir_wcc;
};
typedef struct MKNOD3resok MKNOD3resok;

struct __attribute__((packed)) MKNOD3resfail {
	wcc_data mknod3fail_dir_wcc;
};
typedef struct MKNOD3resfail MKNOD3resfail;

struct __attribute__((packed)) MKNOD3res {
	nfsstat3 status;
	union {
		MKNOD3resok mknod3ok;
		MKNOD3resfail mknod3fail;
	} MKNOD3res_u;
};
typedef struct MKNOD3res MKNOD3res;

struct __attribute__((packed)) REMOVE3args {
	diropargs3 remove3_object;
};
typedef struct REMOVE3args REMOVE3args;

struct __attribute__((packed)) REMOVE3resok {
	wcc_data remove3_dir_wcc;
};
typedef struct REMOVE3resok REMOVE3resok;

struct __attribute__((packed)) REMOVE3resfail {
	wcc_data remove3fail_dir_wcc;
};
typedef struct REMOVE3resfail REMOVE3resfail;

struct __attribute__((packed)) REMOVE3res {
	nfsstat3 status;
	union {
		REMOVE3resok remove3ok;
		REMOVE3resfail remove3fail;
	} REMOVE3res_u;
};
typedef struct REMOVE3res REMOVE3res;

struct __attribute__((packed)) RMDIR3args {
	diropargs3 rmdir3_object;
};
typedef struct RMDIR3args RMDIR3args;

struct __attribute__((packed)) RMDIR3resok {
	wcc_data rmdir3_dir_wcc;
};
typedef struct RMDIR3resok RMDIR3resok;

struct __attribute__((packed)) RMDIR3resfail {
	wcc_data rmdir3fail_dir_wcc;
};
typedef struct RMDIR3resfail RMDIR3resfail;

struct __attribute__((packed)) RMDIR3res {
	nfsstat3 status;
	union {
		RMDIR3resok rmdir3ok;
		RMDIR3resfail rmdir3fail;
	} RMDIR3res_u;
};
typedef struct RMDIR3res RMDIR3res;

struct __attribute__((packed)) RENAME3args {
	diropargs3 rename3_from;
	diropargs3 rename3_to;
};
typedef struct RENAME3args RENAME3args;

struct __attribute__((packed)) RENAME3resok {
	wcc_data rename3_fromdir_wcc;
	wcc_data rename3_todir_wcc;
};
typedef struct RENAME3resok RENAME3resok;

struct __attribute__((packed)) RENAME3resfail {
	wcc_data rename3fail_fromdir_wcc;
	wcc_data rename3fail_todir_wcc;
};
typedef struct RENAME3resfail RENAME3resfail;

struct __attribute__((packed)) RENAME3res {
	nfsstat3 status;
	union {
		RENAME3resok rename3ok;
		RENAME3resfail rename3fail;
	} RENAME3res_u;
};
typedef struct RENAME3res RENAME3res;

struct __attribute__((packed)) LINK3args {
	nfs_fh3 link3_file;
	diropargs3 link3_link;
};
typedef struct LINK3args LINK3args;

struct __attribute__((packed)) LINK3resok {
	post_op_attr link3_file_attributes;
	wcc_data link3_linkdir_wcc;
};
typedef struct LINK3resok LINK3resok;

struct __attribute__((packed)) LINK3resfail {
	post_op_attr link3fail_file_attributes;
	wcc_data link3fail_linkdir_wcc;
};
typedef struct LINK3resfail LINK3resfail;

struct __attribute__((packed)) LINK3res {
	nfsstat3 status;
	union {
		LINK3resok link3ok;
		LINK3resfail link3fail;
	} LINK3res_u;
};
typedef struct LINK3res LINK3res;

struct __attribute__((packed)) READDIR3args {
	nfs_fh3 readdir3_dir;
	cookie3 readdir3_cookie;
	cookieverf3 readdir3_cookieverf;
	count3 readdir3_count;
};
typedef struct READDIR3args READDIR3args;

struct __attribute__((packed)) entry3 {
	fileid3 entry3_fileid;
	filename3 entry3_name;
	cookie3 entry3_cookie;
	struct entry3 *entry3_nextentry;
};
typedef struct entry3 entry3;

struct __attribute__((packed)) dirlist3 {
	entry3 *dirlist3_entries;
	bool_t dirlist3_eof;
};
typedef struct dirlist3 dirlist3;

struct __attribute__((packed)) READDIR3resok {
	post_op_attr readdir3_dir_attributes;
	cookieverf3 readdir3_cookieverf_res;
	dirlist3 readdir3_reply;
};
typedef struct READDIR3resok READDIR3resok;

struct __attribute__((packed)) READDIR3resfail {
	post_op_attr readdir3fail_dir_attributes;
};
typedef struct READDIR3resfail READDIR3resfail;

struct __attribute__((packed)) READDIR3res {
	nfsstat3 status;
	union {
		READDIR3resok readdir3ok;
		READDIR3resfail readdir3fail;
	} READDIR3res_u;
};
typedef struct READDIR3res READDIR3res;

struct __attribute__((packed)) READDIRPLUS3args {
	nfs_fh3 readdirplus3_dir;
	cookie3 readdirplus3_cookie;
	cookieverf3 readdirplus3_cookieverf;
	count3 readdirplus3_dircount;
	count3 readdirplus3_maxcount;
};
typedef struct READDIRPLUS3args READDIRPLUS3args;

struct __attribute__((packed)) entryplus3 {
	fileid3 entryplus3_fileid;
	filename3 entryplus3_name;
	cookie3 entryplus3_cookie;
	post_op_attr entryplus3_name_attributes;
	post_op_fh3 entryplus3_name_handle;
	struct entryplus3 *entryplus3_nextentry;
};
typedef struct entryplus3 entryplus3;

struct __attribute__((packed)) dirlistplus3 {
	entryplus3 *dirlistplus3_entries;
	bool_t dirlistplus3_eof;
};
typedef struct dirlistplus3 dirlistplus3;

struct __attribute__((packed)) READDIRPLUS3resok {
	post_op_attr readdirplus3_dir_attributes;
	cookieverf3 readdirplus3_cookieverf_res;
	dirlistplus3 readdirplus3_reply;
};
typedef struct READDIRPLUS3resok READDIRPLUS3resok;

struct __attribute__((packed)) READDIRPLUS3resfail {
	post_op_attr readdirplus3fail_dir_attributes;
};
typedef struct READDIRPLUS3resfail READDIRPLUS3resfail;

struct __attribute__((packed)) READDIRPLUS3res {
	nfsstat3 status;
	union {
		READDIRPLUS3resok readdirplus3ok;
		READDIRPLUS3resfail readdirplus3fail;
	} READDIRPLUS3res_u;
};
typedef struct READDIRPLUS3res READDIRPLUS3res;

struct __attribute__((packed)) FSSTAT3args {
	nfs_fh3 fsstat3_fsroot;
};
typedef struct FSSTAT3args FSSTAT3args;

struct __attribute__((packed)) fsstat3 {
	size3 fsstat3_tbytes;
	size3 fsstat3_fbytes;
	size3 fsstat3_abytes;
	size3 fsstat3_tfiles;
	size3 fsstat3_ffiles;
	size3 fsstat3_afiles;
};
typedef struct fsstat3 fsstat3;

struct __attribute__((packed)) FSSTAT3resok {
	post_op_attr fsstat3_obj_attributes;
	fsstat3 fsstat3_fsstat3;
	u_int fsstat3_invarsec;
};
typedef struct FSSTAT3resok FSSTAT3resok;

struct __attribute__((packed)) FSSTAT3resfail {
	post_op_attr fsstat3fail_obj_attributes;
};
typedef struct FSSTAT3resfail FSSTAT3resfail;

struct __attribute__((packed)) FSSTAT3res {
	nfsstat3 status;
	union {
		FSSTAT3resok fsstat3ok;
		FSSTAT3resfail fsstat3fail;
	} FSSTAT3res_u;
};
typedef struct FSSTAT3res FSSTAT3res;
#define FSF3_LINK 0x0001
#define FSF3_SYMLINK 0x0002
#define FSF3_HOMOGENEOUS 0x0008
#define FSF3_CANSETTIME 0x0010

struct __attribute__((packed)) FSINFO3args {
	nfs_fh3 fsinfo3_fsroot;
};
typedef struct FSINFO3args FSINFO3args;

struct __attribute__((packed)) fsinfo3 {
	u_int fsinfo3_rtmax;
	u_int fsinfo3_rtpref;
	u_int fsinfo3_rtmult;
	u_int fsinfo3_wtmax;
	u_int fsinfo3_wtpref;
	u_int fsinfo3_wtmult;
	u_int fsinfo3_dtpref;
	size3 fsinfo3_maxfilesize;
	nfstime3 fsinfo3_time_delta;
	u_int fsinfo3_properties;
};
typedef struct fsinfo3 fsinfo3;

struct __attribute__((packed)) FSINFO3resok {
	post_op_attr fsinfo3_obj_attributes;
	fsinfo3 fsinfo3_fsinfo3;
};
typedef struct FSINFO3resok FSINFO3resok;

struct __attribute__((packed)) FSINFO3resfail {
	post_op_attr fsinfo3fail_obj_attributes;
};
typedef struct FSINFO3resfail FSINFO3resfail;

struct __attribute__((packed)) FSINFO3res {
	nfsstat3 status;
	union {
		FSINFO3resok fsinfo3ok;
		FSINFO3resfail fsinfo3fail;
	} FSINFO3res_u;
};
typedef struct FSINFO3res FSINFO3res;

struct __attribute__((packed)) PATHCONF3args {
	nfs_fh3 pathconf3_object;
};
typedef struct PATHCONF3args PATHCONF3args;

struct __attribute__((packed)) PATHCONF3resok {
	post_op_attr pathconf3_obj_attributes;
	u_int pathconf3_linkmax;
	u_int pathconf3_name_max;
	bool_t pathconf3_no_trunc;
	bool_t pathconf3_chown_restricted;
	bool_t pathconf3_case_insensitive;
	bool_t pathconf3_case_preserving;
};
typedef struct PATHCONF3resok PATHCONF3resok;

struct __attribute__((packed)) PATHCONF3resfail {
	post_op_attr pathconf3fail_obj_attributes;
};
typedef struct PATHCONF3resfail PATHCONF3resfail;

struct __attribute__((packed)) PATHCONF3res {
	nfsstat3 status;
	union {
		PATHCONF3resok pathconf3ok;
		PATHCONF3resfail pathconf3fail;
	} PATHCONF3res_u;
};
typedef struct PATHCONF3res PATHCONF3res;

struct __attribute__((packed)) COMMIT3args {
	nfs_fh3 commit3_file;
	offset3 commit3_offset;
	count3 commit3_count;
};
typedef struct COMMIT3args COMMIT3args;

struct __attribute__((packed)) COMMIT3resok {
	wcc_data commit3_file_wcc;
	writeverf3 commit3_verf;
};
typedef struct COMMIT3resok COMMIT3resok;

struct __attribute__((packed)) COMMIT3resfail {
	wcc_data commit3fail_file_wcc;
};
typedef struct COMMIT3resfail COMMIT3resfail;

struct __attribute__((packed)) COMMIT3res {
	nfsstat3 status;
	union {
		COMMIT3resok commit3ok;
		COMMIT3resfail commit3fail;
	} COMMIT3res_u;
};
typedef struct COMMIT3res COMMIT3res;

#define RPCPROG_NFS 100003
#define NFS_V2 2

#if defined(__STDC__) || defined(__cplusplus)
#define NFS_V2_NULL 0
extern  enum clnt_stat nfs_v2_null_2(void *, void *, CLIENT *);
extern  bool_t nfs_v2_null_2_svc(void *, void *, struct svc_req *);
#define NFS_V2_GETATTR 1
extern  enum clnt_stat nfs_v2_getattr_2(nfs_fh2 *, attrstat2 *, CLIENT *);
extern  bool_t nfs_v2_getattr_2_svc(nfs_fh2 *, attrstat2 *, struct svc_req *);
#define NFS_V2_SETATTR 2
extern  enum clnt_stat nfs_v2_setattr_2(sattr2args *, attrstat2 *, CLIENT *);
extern  bool_t nfs_v2_setattr_2_svc(sattr2args *, attrstat2 *, struct svc_req *);
#define NFS_V2_ROOT 3
extern  enum clnt_stat nfs_v2_root_2(void *, void *, CLIENT *);
extern  bool_t nfs_v2_root_2_svc(void *, void *, struct svc_req *);
#define NFS_V2_LOOKUP 4
extern  enum clnt_stat nfs_v2_lookup_2(dirop2args *, dirop2res *, CLIENT *);
extern  bool_t nfs_v2_lookup_2_svc(dirop2args *, dirop2res *, struct svc_req *);
#define NFS_V2_READLINK 5
extern  enum clnt_stat nfs_v2_readlink_2(nfs_fh2 *, readlink2res *, CLIENT *);
extern  bool_t nfs_v2_readlink_2_svc(nfs_fh2 *, readlink2res *, struct svc_req *);
#define NFS_V2_READ 6
extern  enum clnt_stat nfs_v2_read_2(read2args *, read2res *, CLIENT *);
extern  bool_t nfs_v2_read_2_svc(read2args *, read2res *, struct svc_req *);
#define NFS_V2_WRITECACHE 7
extern  enum clnt_stat nfs_v2_writecache_2(void *, void *, CLIENT *);
extern  bool_t nfs_v2_writecache_2_svc(void *, void *, struct svc_req *);
#define NFS_V2_WRITE 8
extern  enum clnt_stat nfs_v2_write_2(write2args *, attrstat2 *, CLIENT *);
extern  bool_t nfs_v2_write_2_svc(write2args *, attrstat2 *, struct svc_req *);
#define NFS_V2_CREATE 9
extern  enum clnt_stat nfs_v2_create_2(create2args *, dirop2res *, CLIENT *);
extern  bool_t nfs_v2_create_2_svc(create2args *, dirop2res *, struct svc_req *);
#define NFS_V2_REMOVE 10
extern  enum clnt_stat nfs_v2_remove_2(dirop2args *, nfsstat2 *, CLIENT *);
extern  bool_t nfs_v2_remove_2_svc(dirop2args *, nfsstat2 *, struct svc_req *);
#define NFS_V2_RENAME 11
extern  enum clnt_stat nfs_v2_rename_2(rename2args *, nfsstat2 *, CLIENT *);
extern  bool_t nfs_v2_rename_2_svc(rename2args *, nfsstat2 *, struct svc_req *);
#define NFS_V2_LINK 12
extern  enum clnt_stat nfs_v2_link_2(link2args *, nfsstat2 *, CLIENT *);
extern  bool_t nfs_v2_link_2_svc(link2args *, nfsstat2 *, struct svc_req *);
#define NFS_V2_SYMLINK 13
extern  enum clnt_stat nfs_v2_symlink_2(symlink2args *, nfsstat2 *, CLIENT *);
extern  bool_t nfs_v2_symlink_2_svc(symlink2args *, nfsstat2 *, struct svc_req *);
#define NFS_V2_MKDIR 14
extern  enum clnt_stat nfs_v2_mkdir_2(create2args *, dirop2res *, CLIENT *);
extern  bool_t nfs_v2_mkdir_2_svc(create2args *, dirop2res *, struct svc_req *);
#define NFS_V2_RMDIR 15
extern  enum clnt_stat nfs_v2_rmdir_2(dirop2args *, nfsstat2 *, CLIENT *);
extern  bool_t nfs_v2_rmdir_2_svc(dirop2args *, nfsstat2 *, struct svc_req *);
#define NFS_V2_READDIR 16
extern  enum clnt_stat nfs_v2_readdir_2(readdir2args *, readdir2res *, CLIENT *);
extern  bool_t nfs_v2_readdir_2_svc(readdir2args *, readdir2res *, struct svc_req *);
#define NFS_V2_STATFS 17
extern  enum clnt_stat nfs_v2_statfs_2(nfs_fh2 *, statfs2res *, CLIENT *);
extern  bool_t nfs_v2_statfs_2_svc(nfs_fh2 *, statfs2res *, struct svc_req *);
extern int rpcprog_nfs_2_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define NFS_V2_NULL 0
extern  enum clnt_stat nfs_v2_null_2();
extern  bool_t nfs_v2_null_2_svc();
#define NFS_V2_GETATTR 1
extern  enum clnt_stat nfs_v2_getattr_2();
extern  bool_t nfs_v2_getattr_2_svc();
#define NFS_V2_SETATTR 2
extern  enum clnt_stat nfs_v2_setattr_2();
extern  bool_t nfs_v2_setattr_2_svc();
#define NFS_V2_ROOT 3
extern  enum clnt_stat nfs_v2_root_2();
extern  bool_t nfs_v2_root_2_svc();
#define NFS_V2_LOOKUP 4
extern  enum clnt_stat nfs_v2_lookup_2();
extern  bool_t nfs_v2_lookup_2_svc();
#define NFS_V2_READLINK 5
extern  enum clnt_stat nfs_v2_readlink_2();
extern  bool_t nfs_v2_readlink_2_svc();
#define NFS_V2_READ 6
extern  enum clnt_stat nfs_v2_read_2();
extern  bool_t nfs_v2_read_2_svc();
#define NFS_V2_WRITECACHE 7
extern  enum clnt_stat nfs_v2_writecache_2();
extern  bool_t nfs_v2_writecache_2_svc();
#define NFS_V2_WRITE 8
extern  enum clnt_stat nfs_v2_write_2();
extern  bool_t nfs_v2_write_2_svc();
#define NFS_V2_CREATE 9
extern  enum clnt_stat nfs_v2_create_2();
extern  bool_t nfs_v2_create_2_svc();
#define NFS_V2_REMOVE 10
extern  enum clnt_stat nfs_v2_remove_2();
extern  bool_t nfs_v2_remove_2_svc();
#define NFS_V2_RENAME 11
extern  enum clnt_stat nfs_v2_rename_2();
extern  bool_t nfs_v2_rename_2_svc();
#define NFS_V2_LINK 12
extern  enum clnt_stat nfs_v2_link_2();
extern  bool_t nfs_v2_link_2_svc();
#define NFS_V2_SYMLINK 13
extern  enum clnt_stat nfs_v2_symlink_2();
extern  bool_t nfs_v2_symlink_2_svc();
#define NFS_V2_MKDIR 14
extern  enum clnt_stat nfs_v2_mkdir_2();
extern  bool_t nfs_v2_mkdir_2_svc();
#define NFS_V2_RMDIR 15
extern  enum clnt_stat nfs_v2_rmdir_2();
extern  bool_t nfs_v2_rmdir_2_svc();
#define NFS_V2_READDIR 16
extern  enum clnt_stat nfs_v2_readdir_2();
extern  bool_t nfs_v2_readdir_2_svc();
#define NFS_V2_STATFS 17
extern  enum clnt_stat nfs_v2_statfs_2();
extern  bool_t nfs_v2_statfs_2_svc();
extern int rpcprog_nfs_2_freeresult ();
#endif /* K&R C */
#define NFS_V3 3

#if defined(__STDC__) || defined(__cplusplus)
#define NFS_V3_NULL 0
extern  enum clnt_stat nfs_v3_null_3(void *, void *, CLIENT *);
extern  bool_t nfs_v3_null_3_svc(void *, void *, struct svc_req *);
#define NFS_V3_GETATTR 1
extern  enum clnt_stat nfs_v3_getattr_3(GETATTR3args *, GETATTR3res *, CLIENT *);
extern  bool_t nfs_v3_getattr_3_svc(GETATTR3args *, GETATTR3res *, struct svc_req *);
#define NFS_V3_SETATTR 2
extern  enum clnt_stat nfs_v3_setattr_3(SETATTR3args *, SETATTR3res *, CLIENT *);
extern  bool_t nfs_v3_setattr_3_svc(SETATTR3args *, SETATTR3res *, struct svc_req *);
#define NFS_V3_LOOKUP 3
extern  enum clnt_stat nfs_v3_lookup_3(LOOKUP3args *, LOOKUP3res *, CLIENT *);
extern  bool_t nfs_v3_lookup_3_svc(LOOKUP3args *, LOOKUP3res *, struct svc_req *);
#define NFS_V3_ACCESS 4
extern  enum clnt_stat nfs_v3_access_3(ACCESS3args *, ACCESS3res *, CLIENT *);
extern  bool_t nfs_v3_access_3_svc(ACCESS3args *, ACCESS3res *, struct svc_req *);
#define NFS_V3_READLINK 5
extern  enum clnt_stat nfs_v3_readlink_3(READLINK3args *, READLINK3res *, CLIENT *);
extern  bool_t nfs_v3_readlink_3_svc(READLINK3args *, READLINK3res *, struct svc_req *);
#define NFS_V3_READ 6
extern  enum clnt_stat nfs_v3_read_3(READ3args *, READ3res *, CLIENT *);
extern  bool_t nfs_v3_read_3_svc(READ3args *, READ3res *, struct svc_req *);
#define NFS_V3_WRITE 7
extern  enum clnt_stat nfs_v3_write_3(WRITE3args *, WRITE3res *, CLIENT *);
extern  bool_t nfs_v3_write_3_svc(WRITE3args *, WRITE3res *, struct svc_req *);
#define NFS_V3_CREATE 8
extern  enum clnt_stat nfs_v3_create_3(CREATE3args *, CREATE3res *, CLIENT *);
extern  bool_t nfs_v3_create_3_svc(CREATE3args *, CREATE3res *, struct svc_req *);
#define NFS_V3_MKDIR 9
extern  enum clnt_stat nfs_v3_mkdir_3(MKDIR3args *, MKDIR3res *, CLIENT *);
extern  bool_t nfs_v3_mkdir_3_svc(MKDIR3args *, MKDIR3res *, struct svc_req *);
#define NFS_V3_SYMLINK 10
extern  enum clnt_stat nfs_v3_symlink_3(SYMLINK3args *, SYMLINK3res *, CLIENT *);
extern  bool_t nfs_v3_symlink_3_svc(SYMLINK3args *, SYMLINK3res *, struct svc_req *);
#define NFS_V3_MKNOD 11
extern  enum clnt_stat nfs_v3_mknod_3(MKNOD3args *, MKNOD3res *, CLIENT *);
extern  bool_t nfs_v3_mknod_3_svc(MKNOD3args *, MKNOD3res *, struct svc_req *);
#define NFS_V3_REMOVE 12
extern  enum clnt_stat nfs_v3_remove_3(REMOVE3args *, REMOVE3res *, CLIENT *);
extern  bool_t nfs_v3_remove_3_svc(REMOVE3args *, REMOVE3res *, struct svc_req *);
#define NFS_V3_RMDIR 13
extern  enum clnt_stat nfs_v3_rmdir_3(RMDIR3args *, RMDIR3res *, CLIENT *);
extern  bool_t nfs_v3_rmdir_3_svc(RMDIR3args *, RMDIR3res *, struct svc_req *);
#define NFS_V3_RENAME 14
extern  enum clnt_stat nfs_v3_rename_3(RENAME3args *, RENAME3res *, CLIENT *);
extern  bool_t nfs_v3_rename_3_svc(RENAME3args *, RENAME3res *, struct svc_req *);
#define NFS_V3_LINK 15
extern  enum clnt_stat nfs_v3_link_3(LINK3args *, LINK3res *, CLIENT *);
extern  bool_t nfs_v3_link_3_svc(LINK3args *, LINK3res *, struct svc_req *);
#define NFS_V3_READDIR 16
extern  enum clnt_stat nfs_v3_readdir_3(READDIR3args *, READDIR3res *, CLIENT *);
extern  bool_t nfs_v3_readdir_3_svc(READDIR3args *, READDIR3res *, struct svc_req *);
#define NFS_V3_READDIRPLUS 17
extern  enum clnt_stat nfs_v3_readdirplus_3(READDIRPLUS3args *, READDIRPLUS3res *, CLIENT *);
extern  bool_t nfs_v3_readdirplus_3_svc(READDIRPLUS3args *, READDIRPLUS3res *, struct svc_req *);
#define NFS_V3_FSSTAT 18
extern  enum clnt_stat nfs_v3_fsstat_3(FSSTAT3args *, FSSTAT3res *, CLIENT *);
extern  bool_t nfs_v3_fsstat_3_svc(FSSTAT3args *, FSSTAT3res *, struct svc_req *);
#define NFS_V3_FSINFO 19
extern  enum clnt_stat nfs_v3_fsinfo_3(FSINFO3args *, FSINFO3res *, CLIENT *);
extern  bool_t nfs_v3_fsinfo_3_svc(FSINFO3args *, FSINFO3res *, struct svc_req *);
#define NFS_V3_PATHCONF 20
extern  enum clnt_stat nfs_v3_pathconf_3(PATHCONF3args *, PATHCONF3res *, CLIENT *);
extern  bool_t nfs_v3_pathconf_3_svc(PATHCONF3args *, PATHCONF3res *, struct svc_req *);
#define NFS_V3_COMMIT 21
extern  enum clnt_stat nfs_v3_commit_3(COMMIT3args *, COMMIT3res *, CLIENT *);
extern  bool_t nfs_v3_commit_3_svc(COMMIT3args *, COMMIT3res *, struct svc_req *);
extern int rpcprog_nfs_3_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define NFS_V3_NULL 0
extern  enum clnt_stat nfs_v3_null_3();
extern  bool_t nfs_v3_null_3_svc();
#define NFS_V3_GETATTR 1
extern  enum clnt_stat nfs_v3_getattr_3();
extern  bool_t nfs_v3_getattr_3_svc();
#define NFS_V3_SETATTR 2
extern  enum clnt_stat nfs_v3_setattr_3();
extern  bool_t nfs_v3_setattr_3_svc();
#define NFS_V3_LOOKUP 3
extern  enum clnt_stat nfs_v3_lookup_3();
extern  bool_t nfs_v3_lookup_3_svc();
#define NFS_V3_ACCESS 4
extern  enum clnt_stat nfs_v3_access_3();
extern  bool_t nfs_v3_access_3_svc();
#define NFS_V3_READLINK 5
extern  enum clnt_stat nfs_v3_readlink_3();
extern  bool_t nfs_v3_readlink_3_svc();
#define NFS_V3_READ 6
extern  enum clnt_stat nfs_v3_read_3();
extern  bool_t nfs_v3_read_3_svc();
#define NFS_V3_WRITE 7
extern  enum clnt_stat nfs_v3_write_3();
extern  bool_t nfs_v3_write_3_svc();
#define NFS_V3_CREATE 8
extern  enum clnt_stat nfs_v3_create_3();
extern  bool_t nfs_v3_create_3_svc();
#define NFS_V3_MKDIR 9
extern  enum clnt_stat nfs_v3_mkdir_3();
extern  bool_t nfs_v3_mkdir_3_svc();
#define NFS_V3_SYMLINK 10
extern  enum clnt_stat nfs_v3_symlink_3();
extern  bool_t nfs_v3_symlink_3_svc();
#define NFS_V3_MKNOD 11
extern  enum clnt_stat nfs_v3_mknod_3();
extern  bool_t nfs_v3_mknod_3_svc();
#define NFS_V3_REMOVE 12
extern  enum clnt_stat nfs_v3_remove_3();
extern  bool_t nfs_v3_remove_3_svc();
#define NFS_V3_RMDIR 13
extern  enum clnt_stat nfs_v3_rmdir_3();
extern  bool_t nfs_v3_rmdir_3_svc();
#define NFS_V3_RENAME 14
extern  enum clnt_stat nfs_v3_rename_3();
extern  bool_t nfs_v3_rename_3_svc();
#define NFS_V3_LINK 15
extern  enum clnt_stat nfs_v3_link_3();
extern  bool_t nfs_v3_link_3_svc();
#define NFS_V3_READDIR 16
extern  enum clnt_stat nfs_v3_readdir_3();
extern  bool_t nfs_v3_readdir_3_svc();
#define NFS_V3_READDIRPLUS 17
extern  enum clnt_stat nfs_v3_readdirplus_3();
extern  bool_t nfs_v3_readdirplus_3_svc();
#define NFS_V3_FSSTAT 18
extern  enum clnt_stat nfs_v3_fsstat_3();
extern  bool_t nfs_v3_fsstat_3_svc();
#define NFS_V3_FSINFO 19
extern  enum clnt_stat nfs_v3_fsinfo_3();
extern  bool_t nfs_v3_fsinfo_3_svc();
#define NFS_V3_PATHCONF 20
extern  enum clnt_stat nfs_v3_pathconf_3();
extern  bool_t nfs_v3_pathconf_3_svc();
#define NFS_V3_COMMIT 21
extern  enum clnt_stat nfs_v3_commit_3();
extern  bool_t nfs_v3_commit_3_svc();
extern int rpcprog_nfs_3_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_nfsstat2 (XDR *, nfsstat2*);
extern  bool_t xdr_ftype2 (XDR *, ftype2*);
extern  bool_t xdr_nfs_fh2 (XDR *, nfs_fh2*);
extern  bool_t xdr_nfstime2 (XDR *, nfstime2*);
extern  bool_t xdr_fattr2 (XDR *, fattr2*);
extern  bool_t xdr_sattr2 (XDR *, sattr2*);
extern  bool_t xdr_filename2 (XDR *, filename2*);
extern  bool_t xdr_nfspath2 (XDR *, nfspath2*);
extern  bool_t xdr_attrstat2 (XDR *, attrstat2*);
extern  bool_t xdr_sattr2args (XDR *, sattr2args*);
extern  bool_t xdr_dirop2args (XDR *, dirop2args*);
extern  bool_t xdr_dirop2okres (XDR *, dirop2okres*);
extern  bool_t xdr_dirop2res (XDR *, dirop2res*);
extern  bool_t xdr_readlink2res (XDR *, readlink2res*);
extern  bool_t xdr_read2args (XDR *, read2args*);
extern  bool_t xdr_read2okres (XDR *, read2okres*);
extern  bool_t xdr_read2res (XDR *, read2res*);
extern  bool_t xdr_write2args (XDR *, write2args*);
extern  bool_t xdr_create2args (XDR *, create2args*);
extern  bool_t xdr_rename2args (XDR *, rename2args*);
extern  bool_t xdr_link2args (XDR *, link2args*);
extern  bool_t xdr_symlink2args (XDR *, symlink2args*);
extern  bool_t xdr_nfscookie2 (XDR *, nfscookie2);
extern  bool_t xdr_readdir2args (XDR *, readdir2args*);
extern  bool_t xdr_entry2 (XDR *, entry2*);
extern  bool_t xdr_dirlist2 (XDR *, dirlist2*);
extern  bool_t xdr_readdir2res (XDR *, readdir2res*);
extern  bool_t xdr_statfs2okres (XDR *, statfs2okres*);
extern  bool_t xdr_statfs2res (XDR *, statfs2res*);
extern  bool_t xdr_filename3 (XDR *, filename3*);
extern  bool_t xdr_nfspath3 (XDR *, nfspath3*);
extern  bool_t xdr_fileid3 (XDR *, fileid3*);
extern  bool_t xdr_cookie3 (XDR *, cookie3*);
extern  bool_t xdr_cookieverf3 (XDR *, cookieverf3);
extern  bool_t xdr_createverf3 (XDR *, createverf3);
extern  bool_t xdr_writeverf3 (XDR *, writeverf3);
extern  bool_t xdr_uid3 (XDR *, uid3*);
extern  bool_t xdr_gid3 (XDR *, gid3*);
extern  bool_t xdr_size3 (XDR *, size3*);
extern  bool_t xdr_offset3 (XDR *, offset3*);
extern  bool_t xdr_mode3 (XDR *, mode3*);
extern  bool_t xdr_count3 (XDR *, count3*);
extern  bool_t xdr_nfsstat3 (XDR *, nfsstat3*);
extern  bool_t xdr_ftype3 (XDR *, ftype3*);
extern  bool_t xdr_specdata3 (XDR *, specdata3*);
extern  bool_t xdr_nfs_fh3 (XDR *, nfs_fh3*);
extern  bool_t xdr_nfstime3 (XDR *, nfstime3*);
extern  bool_t xdr_fattr3 (XDR *, fattr3*);
extern  bool_t xdr_post_op_attr (XDR *, post_op_attr*);
extern  bool_t xdr_wcc_attr (XDR *, wcc_attr*);
extern  bool_t xdr_pre_op_attr (XDR *, pre_op_attr*);
extern  bool_t xdr_wcc_data (XDR *, wcc_data*);
extern  bool_t xdr_post_op_fh3 (XDR *, post_op_fh3*);
extern  bool_t xdr_time_how (XDR *, time_how*);
extern  bool_t xdr_set_mode3 (XDR *, set_mode3*);
extern  bool_t xdr_set_uid3 (XDR *, set_uid3*);
extern  bool_t xdr_set_gid3 (XDR *, set_gid3*);
extern  bool_t xdr_set_size3 (XDR *, set_size3*);
extern  bool_t xdr_set_atime (XDR *, set_atime*);
extern  bool_t xdr_set_mtime (XDR *, set_mtime*);
extern  bool_t xdr_sattr3 (XDR *, sattr3*);
extern  bool_t xdr_diropargs3 (XDR *, diropargs3*);
extern  bool_t xdr_GETATTR3args (XDR *, GETATTR3args*);
extern  bool_t xdr_GETATTR3resok (XDR *, GETATTR3resok*);
extern  bool_t xdr_GETATTR3res (XDR *, GETATTR3res*);
extern  bool_t xdr_sattrguard3 (XDR *, sattrguard3*);
extern  bool_t xdr_SETATTR3args (XDR *, SETATTR3args*);
extern  bool_t xdr_SETATTR3resok (XDR *, SETATTR3resok*);
extern  bool_t xdr_SETATTR3resfail (XDR *, SETATTR3resfail*);
extern  bool_t xdr_SETATTR3res (XDR *, SETATTR3res*);
extern  bool_t xdr_LOOKUP3args (XDR *, LOOKUP3args*);
extern  bool_t xdr_LOOKUP3resok (XDR *, LOOKUP3resok*);
extern  bool_t xdr_LOOKUP3resfail (XDR *, LOOKUP3resfail*);
extern  bool_t xdr_LOOKUP3res (XDR *, LOOKUP3res*);
extern  bool_t xdr_ACCESS3args (XDR *, ACCESS3args*);
extern  bool_t xdr_ACCESS3resok (XDR *, ACCESS3resok*);
extern  bool_t xdr_ACCESS3resfail (XDR *, ACCESS3resfail*);
extern  bool_t xdr_ACCESS3res (XDR *, ACCESS3res*);
extern  bool_t xdr_READLINK3args (XDR *, READLINK3args*);
extern  bool_t xdr_READLINK3resok (XDR *, READLINK3resok*);
extern  bool_t xdr_READLINK3resfail (XDR *, READLINK3resfail*);
extern  bool_t xdr_READLINK3res (XDR *, READLINK3res*);
extern  bool_t xdr_READ3args (XDR *, READ3args*);
extern  bool_t xdr_READ3resok (XDR *, READ3resok*);
extern  bool_t xdr_READ3resfail (XDR *, READ3resfail*);
extern  bool_t xdr_READ3res (XDR *, READ3res*);
extern  bool_t xdr_stable_how (XDR *, stable_how*);
extern  bool_t xdr_WRITE3args (XDR *, WRITE3args*);
extern  bool_t xdr_WRITE3resok (XDR *, WRITE3resok*);
extern  bool_t xdr_WRITE3resfail (XDR *, WRITE3resfail*);
extern  bool_t xdr_WRITE3res (XDR *, WRITE3res*);
extern  bool_t xdr_createmode3 (XDR *, createmode3*);
extern  bool_t xdr_createhow3 (XDR *, createhow3*);
extern  bool_t xdr_CREATE3args (XDR *, CREATE3args*);
extern  bool_t xdr_CREATE3resok (XDR *, CREATE3resok*);
extern  bool_t xdr_CREATE3resfail (XDR *, CREATE3resfail*);
extern  bool_t xdr_CREATE3res (XDR *, CREATE3res*);
extern  bool_t xdr_MKDIR3args (XDR *, MKDIR3args*);
extern  bool_t xdr_MKDIR3resok (XDR *, MKDIR3resok*);
extern  bool_t xdr_MKDIR3resfail (XDR *, MKDIR3resfail*);
extern  bool_t xdr_MKDIR3res (XDR *, MKDIR3res*);
extern  bool_t xdr_symlinkdata3 (XDR *, symlinkdata3*);
extern  bool_t xdr_SYMLINK3args (XDR *, SYMLINK3args*);
extern  bool_t xdr_SYMLINK3resok (XDR *, SYMLINK3resok*);
extern  bool_t xdr_SYMLINK3resfail (XDR *, SYMLINK3resfail*);
extern  bool_t xdr_SYMLINK3res (XDR *, SYMLINK3res*);
extern  bool_t xdr_devicedata3 (XDR *, devicedata3*);
extern  bool_t xdr_mknoddata3 (XDR *, mknoddata3*);
extern  bool_t xdr_MKNOD3args (XDR *, MKNOD3args*);
extern  bool_t xdr_MKNOD3resok (XDR *, MKNOD3resok*);
extern  bool_t xdr_MKNOD3resfail (XDR *, MKNOD3resfail*);
extern  bool_t xdr_MKNOD3res (XDR *, MKNOD3res*);
extern  bool_t xdr_REMOVE3args (XDR *, REMOVE3args*);
extern  bool_t xdr_REMOVE3resok (XDR *, REMOVE3resok*);
extern  bool_t xdr_REMOVE3resfail (XDR *, REMOVE3resfail*);
extern  bool_t xdr_REMOVE3res (XDR *, REMOVE3res*);
extern  bool_t xdr_RMDIR3args (XDR *, RMDIR3args*);
extern  bool_t xdr_RMDIR3resok (XDR *, RMDIR3resok*);
extern  bool_t xdr_RMDIR3resfail (XDR *, RMDIR3resfail*);
extern  bool_t xdr_RMDIR3res (XDR *, RMDIR3res*);
extern  bool_t xdr_RENAME3args (XDR *, RENAME3args*);
extern  bool_t xdr_RENAME3resok (XDR *, RENAME3resok*);
extern  bool_t xdr_RENAME3resfail (XDR *, RENAME3resfail*);
extern  bool_t xdr_RENAME3res (XDR *, RENAME3res*);
extern  bool_t xdr_LINK3args (XDR *, LINK3args*);
extern  bool_t xdr_LINK3resok (XDR *, LINK3resok*);
extern  bool_t xdr_LINK3resfail (XDR *, LINK3resfail*);
extern  bool_t xdr_LINK3res (XDR *, LINK3res*);
extern  bool_t xdr_READDIR3args (XDR *, READDIR3args*);
extern  bool_t xdr_entry3 (XDR *, entry3*);
extern  bool_t xdr_dirlist3 (XDR *, dirlist3*);
extern  bool_t xdr_READDIR3resok (XDR *, READDIR3resok*);
extern  bool_t xdr_READDIR3resfail (XDR *, READDIR3resfail*);
extern  bool_t xdr_READDIR3res (XDR *, READDIR3res*);
extern  bool_t xdr_READDIRPLUS3args (XDR *, READDIRPLUS3args*);
extern  bool_t xdr_entryplus3 (XDR *, entryplus3*);
extern  bool_t xdr_dirlistplus3 (XDR *, dirlistplus3*);
extern  bool_t xdr_READDIRPLUS3resok (XDR *, READDIRPLUS3resok*);
extern  bool_t xdr_READDIRPLUS3resfail (XDR *, READDIRPLUS3resfail*);
extern  bool_t xdr_READDIRPLUS3res (XDR *, READDIRPLUS3res*);
extern  bool_t xdr_FSSTAT3args (XDR *, FSSTAT3args*);
extern  bool_t xdr_fsstat3 (XDR *, fsstat3*);
extern  bool_t xdr_FSSTAT3resok (XDR *, FSSTAT3resok*);
extern  bool_t xdr_FSSTAT3resfail (XDR *, FSSTAT3resfail*);
extern  bool_t xdr_FSSTAT3res (XDR *, FSSTAT3res*);
extern  bool_t xdr_FSINFO3args (XDR *, FSINFO3args*);
extern  bool_t xdr_fsinfo3 (XDR *, fsinfo3*);
extern  bool_t xdr_FSINFO3resok (XDR *, FSINFO3resok*);
extern  bool_t xdr_FSINFO3resfail (XDR *, FSINFO3resfail*);
extern  bool_t xdr_FSINFO3res (XDR *, FSINFO3res*);
extern  bool_t xdr_PATHCONF3args (XDR *, PATHCONF3args*);
extern  bool_t xdr_PATHCONF3resok (XDR *, PATHCONF3resok*);
extern  bool_t xdr_PATHCONF3resfail (XDR *, PATHCONF3resfail*);
extern  bool_t xdr_PATHCONF3res (XDR *, PATHCONF3res*);
extern  bool_t xdr_COMMIT3args (XDR *, COMMIT3args*);
extern  bool_t xdr_COMMIT3resok (XDR *, COMMIT3resok*);
extern  bool_t xdr_COMMIT3resfail (XDR *, COMMIT3resfail*);
extern  bool_t xdr_COMMIT3res (XDR *, COMMIT3res*);

#else /* K&R C */
extern bool_t xdr_nfsstat2 ();
extern bool_t xdr_ftype2 ();
extern bool_t xdr_nfs_fh2 ();
extern bool_t xdr_nfstime2 ();
extern bool_t xdr_fattr2 ();
extern bool_t xdr_sattr2 ();
extern bool_t xdr_filename2 ();
extern bool_t xdr_nfspath2 ();
extern bool_t xdr_attrstat2 ();
extern bool_t xdr_sattr2args ();
extern bool_t xdr_dirop2args ();
extern bool_t xdr_dirop2okres ();
extern bool_t xdr_dirop2res ();
extern bool_t xdr_readlink2res ();
extern bool_t xdr_read2args ();
extern bool_t xdr_read2okres ();
extern bool_t xdr_read2res ();
extern bool_t xdr_write2args ();
extern bool_t xdr_create2args ();
extern bool_t xdr_rename2args ();
extern bool_t xdr_link2args ();
extern bool_t xdr_symlink2args ();
extern bool_t xdr_nfscookie2 ();
extern bool_t xdr_readdir2args ();
extern bool_t xdr_entry2 ();
extern bool_t xdr_dirlist2 ();
extern bool_t xdr_readdir2res ();
extern bool_t xdr_statfs2okres ();
extern bool_t xdr_statfs2res ();
extern bool_t xdr_filename3 ();
extern bool_t xdr_nfspath3 ();
extern bool_t xdr_fileid3 ();
extern bool_t xdr_cookie3 ();
extern bool_t xdr_cookieverf3 ();
extern bool_t xdr_createverf3 ();
extern bool_t xdr_writeverf3 ();
extern bool_t xdr_uid3 ();
extern bool_t xdr_gid3 ();
extern bool_t xdr_size3 ();
extern bool_t xdr_offset3 ();
extern bool_t xdr_mode3 ();
extern bool_t xdr_count3 ();
extern bool_t xdr_nfsstat3 ();
extern bool_t xdr_ftype3 ();
extern bool_t xdr_specdata3 ();
extern bool_t xdr_nfs_fh3 ();
extern bool_t xdr_nfstime3 ();
extern bool_t xdr_fattr3 ();
extern bool_t xdr_post_op_attr ();
extern bool_t xdr_wcc_attr ();
extern bool_t xdr_pre_op_attr ();
extern bool_t xdr_wcc_data ();
extern bool_t xdr_post_op_fh3 ();
extern bool_t xdr_time_how ();
extern bool_t xdr_set_mode3 ();
extern bool_t xdr_set_uid3 ();
extern bool_t xdr_set_gid3 ();
extern bool_t xdr_set_size3 ();
extern bool_t xdr_set_atime ();
extern bool_t xdr_set_mtime ();
extern bool_t xdr_sattr3 ();
extern bool_t xdr_diropargs3 ();
extern bool_t xdr_GETATTR3args ();
extern bool_t xdr_GETATTR3resok ();
extern bool_t xdr_GETATTR3res ();
extern bool_t xdr_sattrguard3 ();
extern bool_t xdr_SETATTR3args ();
extern bool_t xdr_SETATTR3resok ();
extern bool_t xdr_SETATTR3resfail ();
extern bool_t xdr_SETATTR3res ();
extern bool_t xdr_LOOKUP3args ();
extern bool_t xdr_LOOKUP3resok ();
extern bool_t xdr_LOOKUP3resfail ();
extern bool_t xdr_LOOKUP3res ();
extern bool_t xdr_ACCESS3args ();
extern bool_t xdr_ACCESS3resok ();
extern bool_t xdr_ACCESS3resfail ();
extern bool_t xdr_ACCESS3res ();
extern bool_t xdr_READLINK3args ();
extern bool_t xdr_READLINK3resok ();
extern bool_t xdr_READLINK3resfail ();
extern bool_t xdr_READLINK3res ();
extern bool_t xdr_READ3args ();
extern bool_t xdr_READ3resok ();
extern bool_t xdr_READ3resfail ();
extern bool_t xdr_READ3res ();
extern bool_t xdr_stable_how ();
extern bool_t xdr_WRITE3args ();
extern bool_t xdr_WRITE3resok ();
extern bool_t xdr_WRITE3resfail ();
extern bool_t xdr_WRITE3res ();
extern bool_t xdr_createmode3 ();
extern bool_t xdr_createhow3 ();
extern bool_t xdr_CREATE3args ();
extern bool_t xdr_CREATE3resok ();
extern bool_t xdr_CREATE3resfail ();
extern bool_t xdr_CREATE3res ();
extern bool_t xdr_MKDIR3args ();
extern bool_t xdr_MKDIR3resok ();
extern bool_t xdr_MKDIR3resfail ();
extern bool_t xdr_MKDIR3res ();
extern bool_t xdr_symlinkdata3 ();
extern bool_t xdr_SYMLINK3args ();
extern bool_t xdr_SYMLINK3resok ();
extern bool_t xdr_SYMLINK3resfail ();
extern bool_t xdr_SYMLINK3res ();
extern bool_t xdr_devicedata3 ();
extern bool_t xdr_mknoddata3 ();
extern bool_t xdr_MKNOD3args ();
extern bool_t xdr_MKNOD3resok ();
extern bool_t xdr_MKNOD3resfail ();
extern bool_t xdr_MKNOD3res ();
extern bool_t xdr_REMOVE3args ();
extern bool_t xdr_REMOVE3resok ();
extern bool_t xdr_REMOVE3resfail ();
extern bool_t xdr_REMOVE3res ();
extern bool_t xdr_RMDIR3args ();
extern bool_t xdr_RMDIR3resok ();
extern bool_t xdr_RMDIR3resfail ();
extern bool_t xdr_RMDIR3res ();
extern bool_t xdr_RENAME3args ();
extern bool_t xdr_RENAME3resok ();
extern bool_t xdr_RENAME3resfail ();
extern bool_t xdr_RENAME3res ();
extern bool_t xdr_LINK3args ();
extern bool_t xdr_LINK3resok ();
extern bool_t xdr_LINK3resfail ();
extern bool_t xdr_LINK3res ();
extern bool_t xdr_READDIR3args ();
extern bool_t xdr_entry3 ();
extern bool_t xdr_dirlist3 ();
extern bool_t xdr_READDIR3resok ();
extern bool_t xdr_READDIR3resfail ();
extern bool_t xdr_READDIR3res ();
extern bool_t xdr_READDIRPLUS3args ();
extern bool_t xdr_entryplus3 ();
extern bool_t xdr_dirlistplus3 ();
extern bool_t xdr_READDIRPLUS3resok ();
extern bool_t xdr_READDIRPLUS3resfail ();
extern bool_t xdr_READDIRPLUS3res ();
extern bool_t xdr_FSSTAT3args ();
extern bool_t xdr_fsstat3 ();
extern bool_t xdr_FSSTAT3resok ();
extern bool_t xdr_FSSTAT3resfail ();
extern bool_t xdr_FSSTAT3res ();
extern bool_t xdr_FSINFO3args ();
extern bool_t xdr_fsinfo3 ();
extern bool_t xdr_FSINFO3resok ();
extern bool_t xdr_FSINFO3resfail ();
extern bool_t xdr_FSINFO3res ();
extern bool_t xdr_PATHCONF3args ();
extern bool_t xdr_PATHCONF3resok ();
extern bool_t xdr_PATHCONF3resfail ();
extern bool_t xdr_PATHCONF3res ();
extern bool_t xdr_COMMIT3args ();
extern bool_t xdr_COMMIT3resok ();
extern bool_t xdr_COMMIT3resfail ();
extern bool_t xdr_COMMIT3res ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_NFS_H_RPCGEN */
