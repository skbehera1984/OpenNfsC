/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _MOUNT_H_RPCGEN
#define _MOUNT_H_RPCGEN

#include <rpc/rpc.h>

#include <pthread.h>

#ifdef __cplusplus
extern "C" {
#endif

#include <nfsrpc/nfs.h>

struct __attribute__((packed)) auth_sys_params {
	u_int auth_sys_stamp;
	char *auth_sys_machinename;
	u_int auth_sys_uid;
	u_int auth_sys_gid;
	struct __attribute__((packed)) {
		u_int auth_sys_gids_len;
		u_int *auth_sys_gids_val;
	} auth_sys_gids;
};
typedef struct auth_sys_params auth_sys_params;

struct __attribute__((packed)) fh2status {
	u_int fhs_status;
	union {
		nfs_fh2 fhs_fh;
	} fh2status_u;
};
typedef struct fh2status fh2status;

typedef char *dirpath;

typedef char *name;

typedef struct mountbody *mountlist;

struct __attribute__((packed)) mountbody {
	name ml_hostname;
	dirpath ml_directory;
	mountlist ml_next;
};
typedef struct mountbody mountbody;

typedef struct groupnode *groups;

struct __attribute__((packed)) groupnode {
	name gr_name;
	groups gr_next;
};
typedef struct groupnode groupnode;

typedef struct exportnode *exports;

struct __attribute__((packed)) exportnode {
	dirpath ex_dir;
	groups ex_groups;
	exports ex_next;
};
typedef struct exportnode exportnode;

enum mountstat3 {
	MNT3_OK = 0,
	MNT3ERR_PERM = 1,
	MNT3ERR_NOENT = 2,
	MNT3ERR_IO = 5,
	MNT3ERR_ACCES = 13,
	MNT3ERR_NOTDIR = 20,
	MNT3ERR_INVAL = 22,
	MNT3ERR_NAMETOOLONG = 63,
	MNT3ERR_NOTSUPP = 10004,
	MNT3ERR_SERVERFAULT = 10006,
};
typedef enum mountstat3 mountstat3;

struct __attribute__((packed)) mountres3_ok {
	nfs_fh3 mount3_fhandle;
	struct __attribute__((packed)) {
		u_int mount3_auth_flavors_len;
		int *mount3_auth_flavors_val;
	} mount3_auth_flavors;
};
typedef struct mountres3_ok mountres3_ok;

struct __attribute__((packed)) mountres3 {
	mountstat3 fhs_status;
	union {
		mountres3_ok mount3_mountinfo;
	} mountres3_u;
};
typedef struct mountres3 mountres3;

#define RPCPROG_MOUNT 100005
#define MOUNT_V2 1

#if defined(__STDC__) || defined(__cplusplus)
#define MOUNT_V2_NULL 0
extern  enum clnt_stat mount_v2_null_1(void *, void *, CLIENT *);
extern  bool_t mount_v2_null_1_svc(void *, void *, struct svc_req *);
#define MOUNT_V2_MNT 1
extern  enum clnt_stat mount_v2_mnt_1(dirpath *, fh2status *, CLIENT *);
extern  bool_t mount_v2_mnt_1_svc(dirpath *, fh2status *, struct svc_req *);
#define MOUNT_V2_DUMP 2
extern  enum clnt_stat mount_v2_dump_1(void *, mountlist *, CLIENT *);
extern  bool_t mount_v2_dump_1_svc(void *, mountlist *, struct svc_req *);
#define MOUNT_V2_UMNT 3
extern  enum clnt_stat mount_v2_umnt_1(dirpath *, void *, CLIENT *);
extern  bool_t mount_v2_umnt_1_svc(dirpath *, void *, struct svc_req *);
#define MOUNT_V2_UMNTALL 4
extern  enum clnt_stat mount_v2_umntall_1(void *, void *, CLIENT *);
extern  bool_t mount_v2_umntall_1_svc(void *, void *, struct svc_req *);
#define MOUNT_V2_EXPORT 5
extern  enum clnt_stat mount_v2_export_1(void *, exports *, CLIENT *);
extern  bool_t mount_v2_export_1_svc(void *, exports *, struct svc_req *);
#define MOUNT_V2_EXPORTALL 6
extern  enum clnt_stat mount_v2_exportall_1(void *, exports *, CLIENT *);
extern  bool_t mount_v2_exportall_1_svc(void *, exports *, struct svc_req *);
extern int rpcprog_mount_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define MOUNT_V2_NULL 0
extern  enum clnt_stat mount_v2_null_1();
extern  bool_t mount_v2_null_1_svc();
#define MOUNT_V2_MNT 1
extern  enum clnt_stat mount_v2_mnt_1();
extern  bool_t mount_v2_mnt_1_svc();
#define MOUNT_V2_DUMP 2
extern  enum clnt_stat mount_v2_dump_1();
extern  bool_t mount_v2_dump_1_svc();
#define MOUNT_V2_UMNT 3
extern  enum clnt_stat mount_v2_umnt_1();
extern  bool_t mount_v2_umnt_1_svc();
#define MOUNT_V2_UMNTALL 4
extern  enum clnt_stat mount_v2_umntall_1();
extern  bool_t mount_v2_umntall_1_svc();
#define MOUNT_V2_EXPORT 5
extern  enum clnt_stat mount_v2_export_1();
extern  bool_t mount_v2_export_1_svc();
#define MOUNT_V2_EXPORTALL 6
extern  enum clnt_stat mount_v2_exportall_1();
extern  bool_t mount_v2_exportall_1_svc();
extern int rpcprog_mount_1_freeresult ();
#endif /* K&R C */
#define MOUNT_V3 3

#if defined(__STDC__) || defined(__cplusplus)
#define MOUNT_V3_NULL 0
extern  enum clnt_stat mount_v3_null_3(void *, void *, CLIENT *);
extern  bool_t mount_v3_null_3_svc(void *, void *, struct svc_req *);
#define MOUNT_V3_MNT 1
extern  enum clnt_stat mount_v3_mnt_3(dirpath *, mountres3 *, CLIENT *);
extern  bool_t mount_v3_mnt_3_svc(dirpath *, mountres3 *, struct svc_req *);
#define MOUNT_V3_DUMP 2
extern  enum clnt_stat mount_v3_dump_3(void *, mountlist *, CLIENT *);
extern  bool_t mount_v3_dump_3_svc(void *, mountlist *, struct svc_req *);
#define MOUNT_V3_UMNT 3
extern  enum clnt_stat mount_v3_umnt_3(dirpath *, void *, CLIENT *);
extern  bool_t mount_v3_umnt_3_svc(dirpath *, void *, struct svc_req *);
#define MOUNT_V3_UMNTALL 4
extern  enum clnt_stat mount_v3_umntall_3(void *, void *, CLIENT *);
extern  bool_t mount_v3_umntall_3_svc(void *, void *, struct svc_req *);
#define MOUNT_V3_EXPORT 5
extern  enum clnt_stat mount_v3_export_3(void *, exports *, CLIENT *);
extern  bool_t mount_v3_export_3_svc(void *, exports *, struct svc_req *);
extern int rpcprog_mount_3_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define MOUNT_V3_NULL 0
extern  enum clnt_stat mount_v3_null_3();
extern  bool_t mount_v3_null_3_svc();
#define MOUNT_V3_MNT 1
extern  enum clnt_stat mount_v3_mnt_3();
extern  bool_t mount_v3_mnt_3_svc();
#define MOUNT_V3_DUMP 2
extern  enum clnt_stat mount_v3_dump_3();
extern  bool_t mount_v3_dump_3_svc();
#define MOUNT_V3_UMNT 3
extern  enum clnt_stat mount_v3_umnt_3();
extern  bool_t mount_v3_umnt_3_svc();
#define MOUNT_V3_UMNTALL 4
extern  enum clnt_stat mount_v3_umntall_3();
extern  bool_t mount_v3_umntall_3_svc();
#define MOUNT_V3_EXPORT 5
extern  enum clnt_stat mount_v3_export_3();
extern  bool_t mount_v3_export_3_svc();
extern int rpcprog_mount_3_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_auth_sys_params (XDR *, auth_sys_params*);
extern  bool_t xdr_fh2status (XDR *, fh2status*);
extern  bool_t xdr_dirpath (XDR *, dirpath*);
extern  bool_t xdr_name (XDR *, name*);
extern  bool_t xdr_mountlist (XDR *, mountlist*);
extern  bool_t xdr_mountbody (XDR *, mountbody*);
extern  bool_t xdr_groups (XDR *, groups*);
extern  bool_t xdr_groupnode (XDR *, groupnode*);
extern  bool_t xdr_exports (XDR *, exports*);
extern  bool_t xdr_exportnode (XDR *, exportnode*);
extern  bool_t xdr_mountstat3 (XDR *, mountstat3*);
extern  bool_t xdr_mountres3_ok (XDR *, mountres3_ok*);
extern  bool_t xdr_mountres3 (XDR *, mountres3*);

#else /* K&R C */
extern bool_t xdr_auth_sys_params ();
extern bool_t xdr_fh2status ();
extern bool_t xdr_dirpath ();
extern bool_t xdr_name ();
extern bool_t xdr_mountlist ();
extern bool_t xdr_mountbody ();
extern bool_t xdr_groups ();
extern bool_t xdr_groupnode ();
extern bool_t xdr_exports ();
extern bool_t xdr_exportnode ();
extern bool_t xdr_mountstat3 ();
extern bool_t xdr_mountres3_ok ();
extern bool_t xdr_mountres3 ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_MOUNT_H_RPCGEN */
